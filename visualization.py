# visualization.py

import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
import numpy as np

# --- Helper Functions ---

def get_float(person_data, key):
    """‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ float ‡∏à‡∏≤‡∏Å dictionary ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    val = person_data.get(key, "")
    if pd.isna(val) or str(val).strip().lower() in ["", "-", "none", "nan", "null"]:
        return None
    try:
        return float(str(val).replace(",", "").strip())
    except (ValueError, TypeError):
        return None

# --- 1. Historical Trend Graphs ---

def plot_historical_trends(history_df):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á"""
    st.subheader("üìà ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á (Historical Trends)")

    if history_df.shape[0] < 2:
        st.info("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏õ‡∏µ)")
        return

    history_df = history_df.sort_values(by="Year", ascending=True).copy()
    history_df['Year_str'] = history_df['Year'].astype(str)

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì BMI ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
    history_df['BMI'] = history_df.apply(
        lambda row: (get_float(row, '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å') / ((get_float(row, '‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á') / 100) ** 2))
        if get_float(row, '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å') and get_float(row, '‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á') else None,
        axis=1
    )

    trend_metrics = {
        '‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢ (BMI)': 'BMI',
        '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î (FBS)': 'FBS',
        '‡∏Ñ‡∏≠‡πÄ‡∏•‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡∏≠‡∏• (Cholesterol)': 'CHOL',
        '‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ï (GFR)': 'GFR',
        '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï (SBP/DBP)': ['SBP', 'DBP']
    }

    col1, col2 = st.columns(2)
    cols = [col1, col2, col1, col2, col1]
    
    for i, (title, keys) in enumerate(trend_metrics.items()):
        with cols[i]:
            if isinstance(keys, list): # ‡∏Å‡∏£‡∏ì‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï
                df_plot = history_df[['Year_str', keys[0], keys[1]]].dropna()
                if not df_plot.empty:
                    fig = px.line(df_plot, x='Year_str', y=keys, title=title, markers=True,
                                  labels={'value': '‡∏Ñ‡πà‡∏≤ (mmHg)', 'Year_str': '‡∏õ‡∏µ ‡∏û.‡∏®.'})
                    fig.update_layout(legend_title_text='‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î')
                    st.plotly_chart(fig, use_container_width=True)
            else:
                df_plot = history_df[['Year_str', keys]].dropna()
                if not df_plot.empty:
                    fig = px.line(df_plot, x='Year_str', y=keys, title=title, markers=True,
                                  labels={'value': '‡∏Ñ‡πà‡∏≤', 'Year_str': '‡∏õ‡∏µ ‡∏û.‡∏®.'})
                    st.plotly_chart(fig, use_container_width=True)


# --- 2. Gauge Charts ---

def plot_gauge_charts(person_data):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏à‡∏ß‡∏±‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç"""
    st.subheader("üéØ ‡πÄ‡∏Å‡∏à‡∏ß‡∏±‡∏î‡∏ú‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û (Health Gauges)")

    col1, col2, col3 = st.columns(3)

    with col1:
        bmi = get_float(person_data, 'BMI')
        if bmi is None:
             weight = get_float(person_data, '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å')
             height = get_float(person_data, '‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á')
             if weight and height:
                 bmi = weight / ((height/100)**2)

        if bmi is not None:
            fig = go.Figure(go.Indicator(
                mode = "gauge+number",
                value = bmi,
                title = {'text': "‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢ (BMI)"},
                gauge = {
                    'axis': {'range': [15, 40]},
                    'steps' : [
                        {'range': [15, 18.5], 'color': "lightblue"},
                        {'range': [18.5, 23], 'color': "green"},
                        {'range': [23, 25], 'color': "yellow"},
                        {'range': [25, 30], 'color': "orange"},
                        {'range': [30, 40], 'color': "red"}],
                    'bar': {'color': "darkblue"}
                }))
            fig.update_layout(height=250, margin=dict(l=10, r=10, t=40, b=10))
            st.plotly_chart(fig, use_container_width=True)

    with col2:
        fbs = get_float(person_data, 'FBS')
        if fbs is not None:
            fig = go.Figure(go.Indicator(
                mode = "gauge+number",
                value = fbs,
                title = {'text': "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• (FBS)"},
                gauge = {
                    'axis': {'range': [60, 160]},
                    'steps' : [
                        {'range': [60, 74], 'color': "yellow"},
                        {'range': [74, 100], 'color': "green"},
                        {'range': [100, 126], 'color': "orange"},
                        {'range': [126, 160], 'color': "red"}],
                    'bar': {'color': "darkblue"}
                }))
            fig.update_layout(height=250, margin=dict(l=10, r=10, t=40, b=10))
            st.plotly_chart(fig, use_container_width=True)

    with col3:
        gfr = get_float(person_data, 'GFR')
        if gfr is not None:
            fig = go.Figure(go.Indicator(
                mode = "gauge+number",
                value = gfr,
                title = {'text': "‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ï (GFR)"},
                gauge = {
                    'axis': {'range': [0, 120]},
                    'steps' : [
                        {'range': [0, 30], 'color': "red"},
                        {'range': [30, 60], 'color': "orange"},
                        {'range': [60, 90], 'color': "yellow"},
                        {'range': [90, 120], 'color': "green"}],
                    'bar': {'color': "darkblue"}
                }))
            fig.update_layout(height=250, margin=dict(l=10, r=10, t=40, b=10))
            st.plotly_chart(fig, use_container_width=True)


# --- 3. Audiogram Chart ---

def plot_audiogram(person_data):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô (Audiogram)"""
    st.subheader("üëÇ ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô (Audiogram)")

    freq_cols = {
        '500': ('R500', 'L500'), '1000': ('R1k', 'L1k'), '2000': ('R2k', 'L2k'),
        '3000': ('R3k', 'L3k'), '4000': ('R4k', 'L4k'), '6000': ('R6k', 'L6k'),
        '8000': ('R8k', 'L8k')
    }
    
    freqs = list(freq_cols.keys())
    r_vals = [get_float(person_data, freq_cols[f][0]) for f in freqs]
    l_vals = [get_float(person_data, freq_cols[f][1]) for f in freqs]

    if all(v is None for v in r_vals) and all(v is None for v in l_vals):
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö Audiogram")
        return

    fig = go.Figure()

    fig.add_trace(go.Scatter(
        x=freqs, y=r_vals,
        mode='lines+markers',
        name='‡∏´‡∏π‡∏Ç‡∏ß‡∏≤ (Right)',
        line=dict(color='red'),
        marker=dict(symbol='circle', size=10)
    ))

    fig.add_trace(go.Scatter(
        x=freqs, y=l_vals,
        mode='lines+markers',
        name='‡∏´‡∏π‡∏ã‡πâ‡∏≤‡∏¢ (Left)',
        line=dict(color='blue'),
        marker=dict(symbol='x', size=10)
    ))

    fig.update_layout(
        title='‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô',
        xaxis_title='‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏á (Hz)',
        yaxis_title='‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô (dB)',
        yaxis=dict(autorange='reversed', range=[-10, 120]),
        xaxis=dict(type='category'),
        legend_title="‡∏´‡∏π",
        template="plotly_white"
    )
    st.plotly_chart(fig, use_container_width=True)


# --- 4. Risk Factor Dashboard ---

def plot_risk_radar(person_data):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏£‡∏î‡∏≤‡∏£‡πå‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á"""
    st.subheader("üï∏Ô∏è ‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏£‡∏î‡∏≤‡∏£‡πå‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á (Risk Factor Radar)")

    def normalize(value, thresholds):
        if value is None: return 1
        for i, threshold in enumerate(thresholds):
            if value <= threshold:
                return i + 1
        return len(thresholds) + 1

    bmi = get_float(person_data, 'BMI')
    if bmi is None:
        weight = get_float(person_data, '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å')
        height = get_float(person_data, '‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á')
        if weight and height:
            bmi = weight / ((height/100)**2)

    categories = ['BMI', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô (SBP)', '‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• (FBS)', '‡πÑ‡∏Ç‡∏°‡∏±‡∏ô (LDL)', '‡πÑ‡∏ï (GFR)']
    values = [
        normalize(bmi, [18.5, 23, 25, 30]),
        normalize(get_float(person_data, 'SBP'), [120, 130, 140, 160]),
        normalize(get_float(person_data, 'FBS'), [100, 126, 150, 200]),
        normalize(get_float(person_data, 'LDL'), [130, 160, 190, 220]),
        6 - normalize(get_float(person_data, 'GFR'), [30, 60, 90, 120]) # Invert GFR score
    ]

    fig = go.Figure()

    fig.add_trace(go.Scatterpolar(
        r=values,
        theta=categories,
        fill='toself',
        name='‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á'
    ))

    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[1, 5],
                tickvals=[1, 2, 3, 4, 5],
                ticktext=['‡∏õ‡∏Å‡∏ï‡∏¥', '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á', '‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á', '‡∏™‡∏π‡∏á', '‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å']
            )),
        showlegend=False,
        title="‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÇ‡∏£‡∏Ñ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á (NCDs)"
    )
    st.plotly_chart(fig, use_container_width=True)


# --- 5. Bar Charts for Comparison ---

def plot_lung_comparison(person_data):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û‡∏õ‡∏≠‡∏î"""
    st.subheader("üìä ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û‡∏õ‡∏≠‡∏î (Spirometry)")

    fvc_actual = get_float(person_data, 'FVC')
    fvc_pred = get_float(person_data, 'FVC predic')
    fev1_actual = get_float(person_data, 'FEV1')
    fev1_pred = get_float(person_data, 'FEV1 predic')

    if fvc_actual is None or fev1_actual is None:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û‡∏õ‡∏≠‡∏î")
        return

    categories = ['FVC (L)', 'FEV1 (L)']
    actual_vals = [fvc_actual, fev1_actual]
    pred_vals = [fvc_pred, fev1_pred]

    fig = go.Figure(data=[
        go.Bar(name='‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ (Actual)', x=categories, y=actual_vals),
        go.Bar(name='‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (Predicted)', x=categories, y=pred_vals)
    ])

    fig.update_layout(
        barmode='group',
        title='‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û‡∏õ‡∏≠‡∏î‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô',
        yaxis_title='‡∏•‡∏¥‡∏ï‡∏£ (L)',
        legend_title="‡∏Ñ‡πà‡∏≤"
    )
    st.plotly_chart(fig, use_container_width=True)


# --- Main Display Function ---

def display_visualization_tab(person_data, history_df):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ó‡πá‡∏ö Visualization ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    ‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å app.py
    """
    st.header(f"‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: {person_data.get('‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•', '')}")
    st.markdown("---")

    # Section 1: Gauges
    plot_gauge_charts(person_data)
    st.markdown("---")

    # Section 2: Trends in Expander
    with st.expander("‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á", expanded=False):
        plot_historical_trends(history_df)
    st.markdown("---")
    
    # Section 3: Performance graphs
    col1, col2 = st.columns(2)
    with col1:
        plot_audiogram(person_data)
    with col2:
        plot_lung_comparison(person_data)
    st.markdown("---")

    # Section 4: Risk Radar
    plot_risk_radar(person_data)
