# visualization.py

import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
import numpy as np

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢ ---

def get_float(person_data, key):
    """‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ float ‡∏à‡∏≤‡∏Å dictionary ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    val = person_data.get(key, "")
    if pd.isna(val) or str(val).strip().lower() in ["", "-", "none", "nan", "null"]:
        return None
    try:
        return float(str(val).replace(",", "").strip())
    except (ValueError, TypeError):
        return None

# --- [‡πÉ‡∏´‡∏°‡πà] ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• (‡∏à‡∏±‡∏î Layout ‡πÉ‡∏´‡∏°‡πà) ---

def display_visualization_tab(person_data, history_df):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ó‡πá‡∏ö Visualization ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    ‡∏à‡∏±‡∏î Layout ‡πÉ‡∏´‡∏°‡πà‡πÇ‡∏î‡∏¢‡πÅ‡∏™‡∏î‡∏á Dashboard ‡∏™‡∏£‡∏∏‡∏õ‡∏Å‡πà‡∏≠‡∏ô ‡πÅ‡∏•‡∏∞‡∏ã‡πà‡∏≠‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÑ‡∏ß‡πâ‡πÉ‡∏ô Expander
    """
    st.header(f"üìä ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: {person_data.get('‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•', '')}")
    st.markdown("---")

    # Section 1: Health Dashboard (‡πÉ‡∏´‡∏°‡πà)
    plot_health_dashboard(person_data)

    st.markdown("---")
    
    # Section 2: ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏° (‡∏ã‡πà‡∏≠‡∏ô‡πÉ‡∏ô Expander)
    with st.expander("‡∏Ñ‡∏•‡∏¥‡∏Å‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏ä‡∏¥‡∏á‡∏•‡∏∂‡∏Å‡πÅ‡∏•‡∏∞‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á"):
        
        st.subheader("‡πÄ‡∏à‡∏≤‡∏∞‡∏•‡∏∂‡∏Å‡∏ú‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏£‡∏≤‡∏¢‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•")
        col1, col2 = st.columns([2, 3])
        with col1:
            plot_risk_radar(person_data)
        with col2:
            plot_gauge_charts(person_data)
        
        st.markdown("<hr>", unsafe_allow_html=True)

        st.subheader(f"‡πÄ‡∏à‡∏≤‡∏∞‡∏•‡∏∂‡∏Å‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢")
        col3, col4 = st.columns(2)
        with col3:
            plot_audiogram(person_data)
        with col4:
            plot_lung_comparison(person_data)
            
        st.markdown("<hr>", unsafe_allow_html=True)
        
        st.subheader("‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á")
        plot_historical_trends(history_df)

# --- [‡πÉ‡∏´‡∏°‡πà] ‡∏™‡πà‡∏ß‡∏ô‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û (Health Score) ---

def calculate_health_score(person_data):
    """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏≠‡∏á‡∏Ñ‡πå‡∏£‡∏ß‡∏°‡∏à‡∏≤‡∏Å‡∏ï‡∏±‡∏ß‡∏ä‡∏µ‡πâ‡∏ß‡∏±‡∏î‡∏´‡∏•‡∏±‡∏Å"""
    scores = {}
    
    # 1. BMI Score (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å 20%)
    bmi = get_float(person_data, 'BMI')
    if bmi is None:
        weight = get_float(person_data, '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å')
        height = get_float(person_data, '‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á')
        if weight and height and height > 0: 
            bmi = weight / ((height/100)**2)
    
    if bmi is not None:
        if 18.5 <= bmi < 23: scores['BMI'] = 100
        elif 23 <= bmi < 25: scores['BMI'] = 75
        elif 25 <= bmi < 30: scores['BMI'] = 50
        else: scores['BMI'] = 25

    # 2. Blood Pressure Score (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å 25%)
    sbp = get_float(person_data, 'SBP')
    if sbp is not None:
        if sbp < 120: scores['SBP'] = 100
        elif sbp < 130: scores['SBP'] = 80
        elif sbp < 140: scores['SBP'] = 60
        elif sbp < 160: scores['SBP'] = 40
        else: scores['SBP'] = 20

    # 3. Blood Sugar Score (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å 25%)
    fbs = get_float(person_data, 'FBS')
    if fbs is not None:
        if fbs < 100: scores['FBS'] = 100
        elif fbs < 126: scores['FBS'] = 70
        else: scores['FBS'] = 40
    
    # 4. LDL Score (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å 15%)
    ldl = get_float(person_data, 'LDL')
    if ldl is not None:
        if ldl < 130: scores['LDL'] = 100
        elif ldl < 160: scores['LDL'] = 70
        elif ldl < 190: scores['LDL'] = 40
        else: scores['LDL'] = 20
        
    # 5. GFR Score (‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å 15%)
    gfr = get_float(person_data, 'GFR')
    if gfr is not None:
        if gfr >= 90: scores['GFR'] = 100
        elif gfr >= 60: scores['GFR'] = 80
        elif gfr >= 30: scores['GFR'] = 50
        else: scores['GFR'] = 20

    # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡πÄ‡∏â‡∏•‡∏µ‡πà‡∏¢‡πÅ‡∏ö‡∏ö‡∏ñ‡πà‡∏ß‡∏á‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å
    weights = {'BMI': 0.20, 'SBP': 0.25, 'FBS': 0.25, 'LDL': 0.15, 'GFR': 0.15}
    total_score = 0
    total_weight = 0
    
    for key, score in scores.items():
        total_score += score * weights[key]
        total_weight += weights[key]
        
    if total_weight == 0: return 0, [], []
    
    final_score = total_score / total_weight
    
    # ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á‡πÅ‡∏•‡∏∞‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤
    positives = [k for k, v in scores.items() if v >= 80]
    improvements = [k for k, v in scores.items() if v < 70]
    
    return final_score, positives, improvements

# --- [‡πÉ‡∏´‡∏°‡πà] Dashboard ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° ---

def plot_health_dashboard(person_data):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á Dashboard ‡∏™‡∏£‡∏∏‡∏õ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡∏õ‡∏£‡∏∞‡∏Å‡∏≠‡∏ö‡∏î‡πâ‡∏ß‡∏¢ Health Score ‡πÅ‡∏•‡∏∞ Body Map"""
    score, positives, improvements = calculate_health_score(person_data)
    
    col1, col2 = st.columns([1, 1])

    with col1:
        st.subheader("‚≠ê Health Score")
        st.caption("‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏° ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏à‡∏≤‡∏Å 5 ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏´‡∏•‡∏±‡∏Å ‡∏¢‡∏¥‡πà‡∏á‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á ‡∏¢‡∏¥‡πà‡∏á‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏î‡∏µ")
        
        fig = go.Figure(go.Indicator(
            mode="gauge+number",
            value=score,
            number={'suffix': "/100"},
            domain={'x': [0, 1], 'y': [0, 1]},
            title={'text': "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏≠‡∏á‡∏Ñ‡πå‡∏£‡∏ß‡∏°", 'font': {'size': 18}},
            gauge={
                'axis': {'range': [0, 100], 'tickwidth': 1, 'tickcolor': "darkblue"},
                'bar': {'color': "#2E7D32" if score >= 80 else ("#F9A825" if score >= 60 else "#C62828")},
                'steps': [
                    {'range': [0, 60], 'color': 'rgba(220, 53, 69, 0.2)'},
                    {'range': [60, 80], 'color': 'rgba(255, 193, 7, 0.2)'},
                    {'range': [80, 100], 'color': 'rgba(40, 167, 69, 0.2)'}],
            }))
        fig.update_layout(height=250, margin=dict(l=20, r=20, t=40, b=10), font_family="Sarabun")
        st.plotly_chart(fig, use_container_width=True)

        # ‡∏™‡∏£‡∏∏‡∏õ‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á-‡∏à‡∏∏‡∏î‡∏≠‡πà‡∏≠‡∏ô
        if positives:
            st.success(f"**‡∏à‡∏∏‡∏î‡πÅ‡∏Ç‡πá‡∏á:** {', '.join(positives)} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏î‡∏µ‡∏°‡∏≤‡∏Å")
        if improvements:
            st.warning(f"**‡∏Ñ‡∏ß‡∏£‡∏û‡∏±‡∏í‡∏ô‡∏≤:** {', '.join(improvements)} ‡∏Ñ‡∏ß‡∏£‡πÉ‡∏´‡πâ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏¥‡πÄ‡∏®‡∏©")


    with col2:
        st.subheader("ü©∫ Health Body Map")
        st.caption("‡πÅ‡∏™‡∏î‡∏á‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏ú‡∏•‡∏Å‡∏£‡∏∞‡∏ó‡∏ö‡∏Ç‡∏≠‡∏á‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ï‡πà‡∏≠‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÜ")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥
        alerts = {}
        if get_float(person_data, 'SBP') and get_float(person_data, 'SBP') >= 140:
            alerts['‡∏´‡∏±‡∏ß‡πÉ‡∏à'] = ('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏™‡∏π‡∏á', 'red')
        if get_float(person_data, 'SGPT') and get_float(person_data, 'SGPT') > 41:
            alerts['‡∏ï‡∏±‡∏ö'] = ('‡∏Ñ‡πà‡∏≤‡πÄ‡∏≠‡∏ô‡πÑ‡∏ã‡∏°‡πå‡∏ï‡∏±‡∏ö‡∏™‡∏π‡∏á', 'orange')
        if get_float(person_data, 'GFR') and get_float(person_data, 'GFR') < 60:
            alerts['‡πÑ‡∏ï'] = ('‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ï‡∏•‡∏î‡∏•‡∏á', 'orange')
        if get_float(person_data, 'FVC ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå') and get_float(person_data, 'FVC ‡πÄ‡∏õ‡∏≠‡∏£‡πå‡πÄ‡∏ã‡πá‡∏ô‡∏ï‡πå') < 80:
             alerts['‡∏õ‡∏≠‡∏î'] = ('‡∏Ñ‡∏ß‡∏≤‡∏°‡∏à‡∏∏‡∏õ‡∏≠‡∏î‡∏≠‡∏≤‡∏à‡∏•‡∏î‡∏•‡∏á', 'lightblue')
        summary_r = person_data.get('‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡∏´‡∏π‡∏Ç‡∏ß‡∏≤', '')
        if "‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥" in summary_r:
             alerts['‡∏´‡∏π'] = ('‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥', 'purple')


        # --- HTML & SVG ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Body Map ---
        body_map_html = f"""
        <div style="position: relative; width: 100%; max-width: 250px; margin: auto; text-align: center;">
            <svg viewBox="0 0 200 400" xmlns="http://www.w3.org/2000/svg">
                <path fill="#D3D3D3" d="M100 5C70 5 60 25 60 45s10 40 40 40 40-20 40-40-10-40-40-40zm-5 85c-20 0-35 10-35 30v100c0 20-10 70-10 90s-5 30 0 30h100c5 0 0-10 0-30s-10-70-10-90V120c0-20-15-30-35-30h-10z M45 250 c-10 0-15 20-15 40v60c0 10 5 20 15 20s15-10 15-20v-60c0-20-5-40-15-40zm110 0c-10 0-15 20-15 40v60c0 10 5 20 15 20s15-10 15-20v-60c0-20-5-40-15-40z"/>
            </svg>
            {'<div title="‡∏´‡∏±‡∏ß‡πÉ‡∏à: {alerts['‡∏´‡∏±‡∏ß‡πÉ‡∏à'][0]}" style="position: absolute; top: 35%; left: 48%; width: 15px; height: 15px; background: {alerts['‡∏´‡∏±‡∏ß‡πÉ‡∏à'][1]}; border-radius: 50%; border: 2px solid white;"></div>' if '‡∏´‡∏±‡∏ß‡πÉ‡∏à' in alerts else ''}
            {'<div title="‡∏ï‡∏±‡∏ö: {alerts['‡∏ï‡∏±‡∏ö'][0]}" style="position: absolute; top: 42%; left: 55%; width: 15px; height: 15px; background: {alerts['‡∏ï‡∏±‡∏ö'][1]}; border-radius: 50%; border: 2px solid white;"></div>' if '‡∏ï‡∏±‡∏ö' in alerts else ''}
            {'<div title="‡πÑ‡∏ï: {alerts['‡πÑ‡∏ï'][0]}" style="position: absolute; top: 48%; left: 38%; width: 15px; height: 15px; background: {alerts['‡πÑ‡∏ï'][1]}; border-radius: 50%; border: 2px solid white;"></div>' if '‡πÑ‡∏ï' in alerts else ''}
            {'<div title="‡∏õ‡∏≠‡∏î: {alerts['‡∏õ‡∏≠‡∏î'][0]}" style="position: absolute; top: 33%; left: 35%; width: 15px; height: 15px; background: {alerts['‡∏õ‡∏≠‡∏î'][1]}; border-radius: 50%; border: 2px solid white;"></div>' if '‡∏õ‡∏≠‡∏î' in alerts else ''}
            {'<div title="‡∏´‡∏π: {alerts['‡∏´‡∏π'][0]}" style="position: absolute; top: 15%; left: 25%; width: 15px; height: 15px; background: {alerts['‡∏´‡∏π'][1]}; border-radius: 50%; border: 2px solid white;"></div>' if '‡∏´‡∏π' in alerts else ''}
        </div>
        <div style="text-align: left; font-size: 0.8rem; margin-top: 1rem;">
            <b>‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢:</b>
            <ul style="padding-left: 20px; margin-top: 5px;">
            {'<li><span style="color:red;"><b>‡∏´‡∏±‡∏ß‡πÉ‡∏à:</b></span> {alerts['‡∏´‡∏±‡∏ß‡πÉ‡∏à'][0]}</li>' if '‡∏´‡∏±‡∏ß‡πÉ‡∏à' in alerts else ''}
            {'<li><span style="color:orange;"><b>‡∏ï‡∏±‡∏ö:</b></span> {alerts['‡∏ï‡∏±‡∏ö'][0]}</li>' if '‡∏ï‡∏±‡∏ö' in alerts else ''}
            {'<li><span style="color:orange;"><b>‡πÑ‡∏ï:</b></span> {alerts['‡πÑ‡∏ï'][0]}</li>' if '‡πÑ‡∏ï' in alerts else ''}
            {'<li><span style="color:lightblue;"><b>‡∏õ‡∏≠‡∏î:</b></span> {alerts['‡∏õ‡∏≠‡∏î'][0]}</li>' if '‡∏õ‡∏≠‡∏î' in alerts else ''}
            {'<li><span style="color:purple;"><b>‡∏´‡∏π:</b></span> {alerts['‡∏´‡∏π'][0]}</li>' if '‡∏´‡∏π' in alerts else ''}
            </ul>
            {'' if alerts else '<p>‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢</p>'}
        </div>
        """
        st.markdown(body_map_html, unsafe_allow_html=True)


# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏î‡∏¥‡∏° (‡∏à‡∏∞‡∏ñ‡∏π‡∏Å‡∏¢‡πâ‡∏≤‡∏¢‡πÑ‡∏õ‡πÉ‡∏ô Expander) ---

def plot_historical_trends(history_df):
    if history_df.shape[0] < 2:
        st.info("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠ (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏õ‡∏µ)")
        return
    history_df = history_df.sort_values(by="Year", ascending=True).copy()
    min_year, max_year = int(history_df['Year'].min()), int(history_df['Year'].max())
    all_years_df = pd.DataFrame({'Year': range(min_year, max_year + 1)})
    history_df = pd.merge(all_years_df, history_df, on='Year', how='left')
    history_df['BMI'] = history_df.apply(lambda row: (get_float(row, '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å') / ((get_float(row, '‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á') / 100) ** 2)) if get_float(row, '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å') and get_float(row, '‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á') and get_float(row, '‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á') > 0 else np.nan, axis=1)
    history_df['Year'] = history_df['Year'].astype(str)
    metric_bands = {'BMI': {"‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏ß‡∏ô": (25, 40, "lightcoral"),"‡∏ó‡πâ‡∏ß‡∏°": (23, 25, "yellow"),"‡∏õ‡∏Å‡∏ï‡∏¥": (18.5, 23, "lightgreen")},'FBS': {"‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô": (126, 200, "lightcoral"),"‡∏†‡∏≤‡∏ß‡∏∞‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á": (100, 126, "yellow"),"‡∏õ‡∏Å‡∏ï‡∏¥": (70, 100, "lightgreen")},'CHOL': {"‡∏™‡∏π‡∏á": (240, 400, "lightcoral"),"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏π‡∏á": (200, 240, "yellow"),"‡∏õ‡∏Å‡∏ï‡∏¥": (100, 200, "lightgreen")},'GFR': {"‡∏õ‡∏Å‡∏ï‡∏¥": (90, 150, "lightgreen"),"‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏™‡∏∑‡πà‡∏≠‡∏°": (60, 90, "yellow"),"‡πÄ‡∏™‡∏∑‡πà‡∏≠‡∏°‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á": (30, 60, "orange"),"‡πÄ‡∏™‡∏∑‡πà‡∏≠‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á": (0, 30, "lightcoral")},'DBP': {},'SBP': {"‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å (‡∏£‡∏∞‡∏î‡∏±‡∏ö 2)": (140, 180, "lightcoral"),"‡∏™‡∏π‡∏á (‡∏£‡∏∞‡∏î‡∏±‡∏ö 1)": (130, 140, "orange"),"‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏π‡∏á": (120, 130, "yellow"),"‡∏õ‡∏Å‡∏ï‡∏¥": (90, 120, "lightgreen")}}
    trend_metrics = {'‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢ (BMI)': ('BMI', 'kg/m¬≤'),'‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î (FBS)': ('FBS', 'mg/dL'),'‡∏Ñ‡∏≠‡πÄ‡∏•‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡∏≠‡∏• (Cholesterol)': ('CHOL', 'mg/dL'),'‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ï (GFR)': ('GFR', 'mL/min'),'‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï': (['SBP', 'DBP'], 'mmHg')}
    col1, col2 = st.columns(2)
    cols = [col1, col2, col1, col2, col1]
    for i, (title, (keys, unit)) in enumerate(trend_metrics.items()):
        with cols[i]:
            fig = None
            bands_key = ''
            if isinstance(keys, list):
                df_plot = history_df[['Year', keys[0], keys[1]]]
                fig = px.line(df_plot, x='Year', y=keys, title=title, markers=True)
                bands_key = 'SBP'
                fig.update_layout(yaxis_range=[80,180])
            else:
                df_plot = history_df[['Year', keys]]
                fig = px.line(df_plot, x='Year', y=keys, title=title, markers=True)
                bands_key = keys
            if fig.layout.yaxis.range is None:
                if bands_key in metric_bands and metric_bands[bands_key]:
                    min_range = min(start for start, end, color in metric_bands[bands_key].values())
                    max_range = max(end for start, end, color in metric_bands[bands_key].values())
                    padding = (max_range - min_range) * 0.1
                    fig.update_layout(yaxis_range=[min_range - padding, max_range + padding])
            if bands_key in metric_bands and fig.layout.yaxis.range is not None:
                for name, (start, end, color) in metric_bands[bands_key].items():
                    fig.add_shape(type="rect", xref="paper", yref="y", x0=0, y0=start, x1=1, y1=end,fillcolor=color, opacity=0.2, layer="below", line_width=0)
                    if abs(end - start) > (fig.layout.yaxis.range[1] - fig.layout.yaxis.range[0]) * 0.1:
                         fig.add_annotation(x=0.98, y=(start+end)/2, text=name, showarrow=False,xref="paper", yref="y", font=dict(size=10, family="Sarabun"),xanchor="right")
            fig.update_traces(connectgaps=False)
            fig.update_layout(yaxis_title=unit, xaxis_title='‡∏õ‡∏µ ‡∏û.‡∏®.', legend_title_text='‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î' if isinstance(keys, list) else "",font_family="Sarabun",template="streamlit")
            st.plotly_chart(fig, use_container_width=True)

def plot_gauge_charts(person_data):
    st.caption("‡πÄ‡∏Å‡∏à‡∏ß‡∏±‡∏î‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô ‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏õ‡∏Å‡∏ï‡∏¥ ‡πÅ‡∏•‡∏∞‡∏à‡∏∞‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡∏á ‡∏™‡πâ‡∏° ‡πÅ‡∏î‡∏á ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏°‡∏µ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Ç‡∏∂‡πâ‡∏ô")
    col1, col2, col3 = st.columns(3)
    with col1:
        bmi = get_float(person_data, 'BMI')
        if bmi is None:
             weight = get_float(person_data, '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å')
             height = get_float(person_data, '‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á')
             if weight and height and height > 0: 
                 bmi = weight / ((height/100)**2)
        if bmi is not None:
            fig = go.Figure(go.Indicator(mode = "gauge+number",value = bmi,title = {'text': "‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢ (BMI)"},gauge = {'axis': {'range': [15, 40]},'steps' : [{'range': [15, 18.5], 'color': "lightblue"},{'range': [18.5, 23], 'color': "green"},{'range': [23, 25], 'color': "yellow"},{'range': [25, 30], 'color': "orange"},{'range': [30, 40], 'color': "red"}],'bar': {'color': "darkblue"}}))
            fig.update_layout(height=250, margin=dict(l=20, r=20, t=40, b=10), font_family="Sarabun", template="streamlit")
            st.plotly_chart(fig, use_container_width=True)
    with col2:
        fbs = get_float(person_data, 'FBS')
        if fbs is not None:
            fig = go.Figure(go.Indicator(mode = "gauge+number",value = fbs,title = {'text': "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• (FBS mg/dL)"},gauge = {'axis': {'range': [60, 160]},'steps' : [{'range': [60, 74], 'color': "yellow"},{'range': [74, 100], 'color': "green"},{'range': [100, 126], 'color': "orange"},{'range': [126, 160], 'color': "red"}],'bar': {'color': "darkblue"}}))
            fig.update_layout(height=250, margin=dict(l=20, r=20, t=40, b=10), font_family="Sarabun", template="streamlit")
            st.plotly_chart(fig, use_container_width=True)
    with col3:
        gfr = get_float(person_data, 'GFR')
        if gfr is not None:
            fig = go.Figure(go.Indicator(mode = "gauge+number",value = gfr,title = {'text': "‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ï (GFR mL/min)"},gauge = {'axis': {'range': [0, 120]},'steps' : [{'range': [0, 30], 'color': "red"},{'range': [30, 60], 'color': "orange"},{'range': [60, 90], 'color': "yellow"},{'range': [90, 120], 'color': "green"}],'bar': {'color': "darkblue"}}))
            fig.update_layout(height=250, margin=dict(l=20, r=20, t=40, b=10), font_family="Sarabun", template="streamlit")
            st.plotly_chart(fig, use_container_width=True)

def plot_risk_radar(person_data):
    st.caption("‡∏Å‡∏£‡∏≤‡∏ü‡∏ô‡∏µ‡πâ‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á 5 ‡∏î‡πâ‡∏≤‡∏ô ‡∏¢‡∏¥‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏µ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡πâ‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏ö‡∏ô‡∏≠‡∏Å ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô (‡∏£‡∏∞‡∏î‡∏±‡∏ö 1 ‡∏Ñ‡∏∑‡∏≠‡∏õ‡∏Å‡∏ï‡∏¥, 5 ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å)")
    def normalize(value, thresholds, higher_is_better=False):
        if value is None: return 1
        if higher_is_better:
            thresholds = thresholds[::-1]
            for i, threshold in enumerate(thresholds):
                if value >= threshold: return i + 1
            return len(thresholds) + 1
        else:
            for i, threshold in enumerate(thresholds):
                if value <= threshold: return i + 1
            return len(thresholds) + 1
    bmi = get_float(person_data, 'BMI')
    if bmi is None:
        weight = get_float(person_data, '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å')
        height = get_float(person_data, '‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á')
        if weight and height and height > 0: 
            bmi = weight / ((height/100)**2)
    categories = ['BMI', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô (SBP)', '‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• (FBS)', '‡πÑ‡∏Ç‡∏°‡∏±‡∏ô (LDL)', '‡πÑ‡∏ï (GFR)']
    values = [normalize(bmi, [22.9, 24.9, 29.9, 35]), normalize(get_float(person_data, 'SBP'), [120, 130, 140, 160]), normalize(get_float(person_data, 'FBS'), [99, 125, 150, 200]), normalize(get_float(person_data, 'LDL'), [129, 159, 189, 220]), normalize(get_float(person_data, 'GFR'), [30, 45, 60, 90], higher_is_better=True)]
    fig = go.Figure()
    fig.add_trace(go.Scatterpolar(r=values,theta=categories,fill='toself',name='‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á'))
    fig.update_layout(polar=dict(radialaxis=dict(visible=True,range=[1, 5],tickvals=[1, 2, 3, 4, 5],ticktext=['‡∏õ‡∏Å‡∏ï‡∏¥', '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á', '‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á', '‡∏™‡∏π‡∏á', '‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å'])),showlegend=False,title="‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÇ‡∏£‡∏Ñ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á (NCDs)",font_family="Sarabun",template="streamlit")
    st.plotly_chart(fig, use_container_width=True)

def plot_audiogram(person_data):
    freq_cols = {'500': ('R500', 'L500'), '1000': ('R1k', 'L1k'), '2000': ('R2k', 'L2k'), '3000': ('R3k', 'L3k'), '4000': ('R4k', 'L4k'), '6000': ('R6k', 'L6k'), '8000': ('R8k', 'L8k')}
    freqs = list(freq_cols.keys())
    r_vals = [get_float(person_data, freq_cols[f][0]) for f in freqs]
    l_vals = [get_float(person_data, freq_cols[f][1]) for f in freqs]
    if all(v is None for v in r_vals) and all(v is None for v in l_vals):
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö Audiogram")
        return
    fig = go.Figure()
    levels = {"‡∏õ‡∏Å‡∏ï‡∏¥": (0, 25, "lightgreen"),"‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢": (25, 40, "yellow"),"‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á": (40, 70, "orange"),"‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á": (70, 120, "lightcoral")}
    for name, (start, end, color) in levels.items():
        fig.add_shape(type="rect", xref="paper", yref="y", x0=0, y0=start, x1=1, y1=end,fillcolor=color, opacity=0.2, layer="below", line_width=0)
        fig.add_annotation(x=0.98, y=(start+end)/2, text=name, showarrow=False,xref="paper", yref="y", font=dict(size=10, family="Sarabun"))
    fig.add_trace(go.Scatter(x=freqs, y=r_vals, mode='lines+markers', name='‡∏´‡∏π‡∏Ç‡∏ß‡∏≤ (Right)',line=dict(color='red'), marker=dict(symbol='circle-open', size=12, line=dict(width=2))))
    fig.add_trace(go.Scatter(x=freqs, y=l_vals, mode='lines+markers', name='‡∏´‡∏π‡∏ã‡πâ‡∏≤‡∏¢ (Left)',line=dict(color='blue'), marker=dict(symbol='x-thin', size=12, line=dict(width=2))))
    fig.update_layout(title='‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô',xaxis_title='‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏á (Hz)',yaxis_title='‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô (dB HL)',yaxis=dict(autorange='reversed', range=[-10, 120]),xaxis=dict(type='category'),legend=dict(x=0.01, y=0.99, bordercolor="black", borderwidth=1),template="streamlit",margin=dict(l=20, r=20, t=40, b=20),font_family="Sarabun")
    st.plotly_chart(fig, use_container_width=True)

def plot_lung_comparison(person_data):
    fvc_actual = get_float(person_data, 'FVC')
    fvc_pred = get_float(person_data, 'FVC predic')
    fev1_actual = get_float(person_data, 'FEV1')
    fev1_pred = get_float(person_data, 'FEV1 predic')
    if fvc_actual is None or fev1_actual is None:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û‡∏õ‡∏≠‡∏î")
        return
    categories = ['FVC (L)', 'FEV1 (L)']
    actual_vals = [fvc_actual, fev1_actual]
    pred_vals = [fvc_pred, fev1_pred]
    fig = go.Figure(data=[go.Bar(name='‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ (Actual)', x=categories, y=actual_vals, text=actual_vals, textposition='auto'),go.Bar(name='‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (Predicted)', x=categories, y=pred_vals, text=pred_vals, textposition='auto')])
    fig.update_traces(texttemplate='%{text:.2f}')
    fig.update_layout(barmode='group',title='‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û‡∏õ‡∏≠‡∏î‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô',yaxis_title='‡∏•‡∏¥‡∏ï‡∏£ (L)',legend_title="‡∏Ñ‡πà‡∏≤",legend=dict(x=0.01, y=0.99),font_family="Sarabun",template="streamlit")
    st.plotly_chart(fig, use_container_width=True)

