# visualization.py

import streamlit as st
import plotly.graph_objects as go
import plotly.express as px
import pandas as pd
import numpy as np

# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏±‡∏ß‡∏ä‡πà‡∏ß‡∏¢ ---

def get_float(person_data, key):
    """‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤ float ‡∏à‡∏≤‡∏Å dictionary ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢"""
    val = person_data.get(key, "")
    if pd.isna(val) or str(val).strip().lower() in ["", "-", "none", "nan", "null"]:
        return None
    try:
        return float(str(val).replace(",", "").strip())
    except (ValueError, TypeError):
        return None

def get_bmi_desc(bmi):
    if bmi is None: return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
    if bmi < 18.5: return "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
    if bmi < 23: return "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏õ‡∏Å‡∏ï‡∏¥"
    if bmi < 25: return "‡∏ó‡πâ‡∏ß‡∏°"
    if bmi < 30: return "‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏ß‡∏ô"
    return "‡πÇ‡∏£‡∏Ñ‡∏≠‡πâ‡∏ß‡∏ô‡∏≠‡∏±‡∏ô‡∏ï‡∏£‡∏≤‡∏¢"

def get_fbs_desc(fbs):
    if fbs is None: return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
    if fbs < 74: return "‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏ï‡πà‡∏≥"
    if fbs < 100: return "‡∏õ‡∏Å‡∏ï‡∏¥"
    if fbs < 126: return "‡∏†‡∏≤‡∏ß‡∏∞‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô"
    return "‡πÄ‡∏Ç‡πâ‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô"

def get_gfr_desc(gfr):
    if gfr is None: return "‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•"
    if gfr >= 90: return "‡∏õ‡∏Å‡∏ï‡∏¥"
    if gfr >= 60: return "‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏™‡∏∑‡πà‡∏≠‡∏°‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
    if gfr >= 30: return "‡πÄ‡∏™‡∏∑‡πà‡∏≠‡∏°‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á"
    if gfr >= 15: return "‡πÄ‡∏™‡∏∑‡πà‡∏≠‡∏°‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á"
    return "‡πÑ‡∏ï‡∏ß‡∏≤‡∏¢‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏∏‡∏î‡∏ó‡πâ‡∏≤‡∏¢"


# --- START OF CHANGE: Add helper for hover text ---
def get_interpretation_text(metric, value):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÅ‡∏õ‡∏•‡∏ú‡∏•‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÉ‡∏ä‡πâ‡πÉ‡∏ô hover tooltip ‡∏Ç‡∏≠‡∏á‡∏Å‡∏£‡∏≤‡∏ü"""
    if pd.isna(value):
        return ""
    if metric == 'BMI':
        return f" ({get_bmi_desc(value)})"
    if metric == 'FBS':
        return f" ({get_fbs_desc(value)})"
    if metric == 'CHOL':
        if value < 200: return " (‡∏õ‡∏Å‡∏ï‡∏¥)"
        if value < 240: return " (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏π‡∏á)"
        return " (‡∏™‡∏π‡∏á)"
    if metric == 'GFR':
        return f" ({get_gfr_desc(value)})"
    if metric == 'SBP':
        if value < 120: return " (‡∏õ‡∏Å‡∏ï‡∏¥)"
        if value < 130: return " (‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏π‡∏á)"
        if value < 140: return " (‡∏™‡∏π‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö 1)"
        if value < 160: return " (‡∏™‡∏π‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö 2)"
        return " (‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å)"
    if metric == 'DBP':
        if value < 80: return " (‡∏õ‡∏Å‡∏ï‡∏¥)"
        if value < 90: return " (‡∏™‡∏π‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö 1)"
        if value < 100: return " (‡∏™‡∏π‡∏á‡∏£‡∏∞‡∏î‡∏±‡∏ö 2)"
        return " (‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å)"
    return ""
# --- END OF CHANGE ---

# --- 1. ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á ---
# --- START OF CHANGE: Overhaul historical trends plot ---
def plot_historical_trends(history_df):
    """
    ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏™‡πâ‡∏ô‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á
    ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏õ‡πâ‡∏≤‡∏´‡∏°‡∏≤‡∏¢, ‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏≠‡∏ô‡∏≤‡∏Ñ‡∏ï, ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÉ‡∏ô tooltip ‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏Ç‡∏∂‡πâ‡∏ô
    """
    st.caption("‡∏Å‡∏£‡∏≤‡∏ü‡∏ô‡∏µ‡πâ‡πÅ‡∏™‡∏î‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÅ‡∏õ‡∏•‡∏á‡∏Ç‡∏≠‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÄ‡∏™‡πâ‡∏ô‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡πÉ‡∏ô‡∏≠‡∏µ‡∏Å 2 ‡∏õ‡∏µ‡∏Ç‡πâ‡∏≤‡∏á‡∏´‡∏ô‡πâ‡∏≤ (‡πÄ‡∏™‡πâ‡∏ô‡∏õ‡∏£‡∏∞) ‡πÅ‡∏•‡∏∞‡πÄ‡∏™‡πâ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û (‡πÄ‡∏™‡πâ‡∏ô‡∏™‡∏µ‡πÄ‡∏Ç‡∏µ‡∏¢‡∏ß)")

    if history_df.shape[0] < 2:
        st.info("‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏° (‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 2 ‡∏õ‡∏µ)")
        return

    history_df = history_df.sort_values(by="Year", ascending=True).copy()

    # Create a full year range to show gaps in data
    min_year, max_year = int(history_df['Year'].min()), int(history_df['Year'].max())
    all_years_df = pd.DataFrame({'Year': range(min_year, max_year + 1)})
    history_df = pd.merge(all_years_df, history_df, on='Year', how='left')

    # Calculate BMI for historical data
    history_df['BMI'] = history_df.apply(
        lambda row: (get_float(row, '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å') / ((get_float(row, '‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á') / 100) ** 2))
        if get_float(row, '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å') and get_float(row, '‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á') else np.nan,
        axis=1
    )
    
    # Define metrics, their keys, units, and goals
    trend_metrics = {
        '‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢ (BMI)': ('BMI', 'kg/m¬≤', 23.0, 'range'),
        '‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î (FBS)': ('FBS', 'mg/dL', 100.0, 'lower'),
        '‡∏Ñ‡∏≠‡πÄ‡∏•‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡∏≠‡∏• (Cholesterol)': ('CHOL', 'mg/dL', 200.0, 'lower'),
        '‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ï (GFR)': ('GFR', 'mL/min', 90.0, 'higher'),
        '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï': (['SBP', 'DBP'], 'mmHg', 120.0, 'lower')
    }
    
    # Prepare data for plotting, including interpretation text for tooltips
    for title, (keys, unit, goal, *_) in trend_metrics.items():
        if isinstance(keys, list):
            for key in keys:
                 history_df[f'{key}_interp'] = history_df[key].apply(lambda x: get_interpretation_text(key, x))
        else:
            history_df[f'{keys}_interp'] = history_df[keys].apply(lambda x: get_interpretation_text(keys, x))

    history_df['Year_str'] = history_df['Year'].astype(str)

    # Layout for plots
    col1, col2 = st.columns(2)
    cols = [col1, col2, col1, col2, col1]
    
    for i, (title, (keys, unit, goal, direction_type)) in enumerate(trend_metrics.items()):
        with cols[i]:
            fig = None
            is_bp_chart = isinstance(keys, list)
            icon = "ü©∏" if is_bp_chart else "üìä"

            # Add direction text to the title
            if direction_type == 'higher':
                direction_text = "(‡∏¢‡∏¥‡πà‡∏á‡∏™‡∏π‡∏á‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ)"
            elif direction_type == 'range':
                direction_text = "(‡∏Ñ‡∏ß‡∏£‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå)"
            else: # Default to 'lower'
                direction_text = "(‡∏¢‡∏¥‡πà‡∏á‡∏ï‡πà‡∏≥‡∏¢‡∏¥‡πà‡∏á‡∏î‡∏µ)"
            full_title = f"{icon} {title} <br><span style='font-size:0.8em;color:gray;'>{direction_text}</span>"


            # Create the base figure
            if is_bp_chart: # Blood Pressure plot
                df_plot = history_df[['Year_str', keys[0], keys[1], f'{keys[0]}_interp', f'{keys[1]}_interp']]
                fig = px.line(df_plot, x='Year_str', y=keys, title=full_title, markers=True)
                fig.data[0].name = 'SBP'
                fig.data[1].name = 'DBP'
                fig.update_traces(
                    hovertemplate='<b>%{x}</b><br>%{data.name}: %{y:.0f}'+ f' mmHg<extra></extra>'
                )

            else: # Single metric plot
                df_plot = history_df[['Year_str', keys, f'{keys}_interp']]
                fig = px.line(df_plot, x='Year_str', y=keys, title=full_title, markers=True,
                              custom_data=[keys, f'{keys}_interp'])
                fig.update_traces(hovertemplate='<b>%{x}</b><br>%{customdata[0]:.1f} ' + unit + '%{customdata[1]}<extra></extra>')

            # Add Goal Line
            fig.add_hline(y=goal, line_width=2, line_dash="dash", line_color="green",
                          annotation_text="‡πÄ‡∏Å‡∏ì‡∏ë‡πå", annotation_position="bottom right")

            # Add Prediction Line
            predict_key = keys[0] if is_bp_chart else keys
            
            clean_df = history_df[['Year', predict_key]].dropna()
            if len(clean_df) >= 3:
                x_fit = clean_df['Year']
                y_fit = clean_df[predict_key]
                
                model = np.polyfit(x_fit, y_fit, 1)
                predict = np.poly1d(model)
                
                future_years = np.array([max_year + 1, max_year + 2])
                predicted_values = predict(future_years)
                
                all_future_years = np.insert(future_years, 0, max_year)
                all_predicted_values = np.insert(predicted_values, 0, predict(max_year))

                fig.add_trace(go.Scatter(
                    x=all_future_years.astype(str), y=all_predicted_values, mode='lines',
                    line=dict(color='rgba(128,128,128,0.7)', width=2, dash='dot'),
                    name='‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå',
                    hovertemplate='‡∏Ñ‡∏≤‡∏î‡∏Å‡∏≤‡∏£‡∏ì‡πå‡∏õ‡∏µ %{x}: %{y:.1f}<extra></extra>'
                ))
            
            # Final Touches
            fig.update_traces(connectgaps=False)
            fig.update_layout(
                yaxis_title=unit, 
                xaxis_title='‡∏õ‡∏µ ‡∏û.‡∏®.', 
                legend_title_text="",
                font_family="Sarabun",
                template="streamlit",
                legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
            )
            st.plotly_chart(fig, use_container_width=True)

# --- END OF CHANGE ---


# --- 2. ‡πÄ‡∏Å‡∏à‡∏ß‡∏±‡∏î ---

def plot_gauge_charts(person_data):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏Å‡∏à‡∏ß‡∏±‡∏î‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"""
    col1, col2, col3 = st.columns(3)

    with col1:
        bmi = get_float(person_data, 'BMI')
        if bmi is None:
             weight = get_float(person_data, '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å')
             height = get_float(person_data, '‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á')
             if weight and height:
                 bmi = weight / ((height/100)**2)

        if bmi is not None:
            fig = go.Figure(go.Indicator(
                mode = "gauge+number",
                value = bmi,
                title = {'text': "‡∏î‡∏±‡∏ä‡∏ô‡∏µ‡∏°‡∏ß‡∏•‡∏Å‡∏≤‡∏¢ (BMI)"},
                gauge = {
                    'axis': {'range': [15, 40]},
                    'steps' : [
                        {'range': [15, 18.5], 'color': "lightblue"},
                        {'range': [18.5, 23], 'color': "green"},
                        {'range': [23, 25], 'color': "yellow"},
                        {'range': [25, 30], 'color': "orange"},
                        {'range': [30, 40], 'color': "red"}],
                    'bar': {'color': "darkblue"}
                }))
            fig.update_layout(height=250, margin=dict(l=20, r=20, t=40, b=10), font_family="Sarabun", template="streamlit")
            st.plotly_chart(fig, use_container_width=True)
            st.markdown(f"<p style='text-align: center; font-weight: bold;'>‡∏ú‡∏•: {get_bmi_desc(bmi)}</p>", unsafe_allow_html=True)


    with col2:
        fbs = get_float(person_data, 'FBS')
        if fbs is not None:
            fig = go.Figure(go.Indicator(
                mode = "gauge+number",
                value = fbs,
                title = {'text': "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• (FBS mg/dL)"},
                gauge = {
                    'axis': {'range': [60, 160]},
                    'steps' : [
                        {'range': [60, 74], 'color': "yellow"},
                        {'range': [74, 100], 'color': "green"},
                        {'range': [100, 126], 'color': "orange"},
                        {'range': [126, 160], 'color': "red"}],
                    'bar': {'color': "darkblue"}
                }))
            fig.update_layout(height=250, margin=dict(l=20, r=20, t=40, b=10), font_family="Sarabun", template="streamlit")
            st.plotly_chart(fig, use_container_width=True)
            st.markdown(f"<p style='text-align: center; font-weight: bold;'>‡∏ú‡∏•: {get_fbs_desc(fbs)}</p>", unsafe_allow_html=True)


    with col3:
        gfr = get_float(person_data, 'GFR')
        if gfr is not None:
            fig = go.Figure(go.Indicator(
                mode = "gauge+number",
                value = gfr,
                title = {'text': "‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ï (GFR mL/min)"},
                gauge = {
                    'axis': {'range': [0, 120]},
                    'steps' : [
                        {'range': [0, 30], 'color': "red"},
                        {'range': [30, 60], 'color': "orange"},
                        {'range': [60, 90], 'color': "yellow"},
                        {'range': [90, 120], 'color': "green"}],
                    'bar': {'color': "darkblue"}
                }))
            fig.update_layout(height=250, margin=dict(l=20, r=20, t=40, b=10), font_family="Sarabun", template="streamlit")
            st.plotly_chart(fig, use_container_width=True)
            st.markdown(f"<p style='text-align: center; font-weight: bold;'>‡∏ú‡∏•: {get_gfr_desc(gfr)}</p>", unsafe_allow_html=True)



# --- 3. ‡∏Å‡∏£‡∏≤‡∏ü‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô ---

def plot_audiogram(person_data):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô (Audiogram) ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏ñ‡∏ö‡∏™‡∏µ‡πÅ‡∏™‡∏î‡∏á‡πÄ‡∏Å‡∏ì‡∏ë‡πå"""
    freq_cols = {
        '500': ('R500', 'L500'), '1000': ('R1k', 'L1k'), '2000': ('R2k', 'L2k'),
        '3000': ('R3k', 'L3k'), '4000': ('R4k', 'L4k'), '6000': ('R6k', 'L6k'),
        '8000': ('R8k', 'L8k')
    }
    
    freqs = list(freq_cols.keys())
    r_vals = [get_float(person_data, freq_cols[f][0]) for f in freqs]
    l_vals = [get_float(person_data, freq_cols[f][1]) for f in freqs]

    if all(v is None for v in r_vals) and all(v is None for v in l_vals):
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô‡πÅ‡∏ö‡∏ö Audiogram")
        return

    fig = go.Figure()

    levels = {
        "‡∏õ‡∏Å‡∏ï‡∏¥": (0, 25, "lightgreen"),
        "‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢": (25, 40, "yellow"),
        "‡∏õ‡∏≤‡∏ô‡∏Å‡∏•‡∏≤‡∏á": (40, 70, "orange"),
        "‡∏£‡∏∏‡∏ô‡πÅ‡∏£‡∏á": (70, 120, "lightcoral")
    }
    for name, (start, end, color) in levels.items():
        fig.add_shape(type="rect", xref="paper", yref="y", x0=0, y0=start, x1=1, y1=end,
                      fillcolor=color, opacity=0.2, layer="below", line_width=0)
        fig.add_annotation(x=0.98, y=(start+end)/2, text=name, showarrow=False,
                           xref="paper", yref="y", font=dict(size=10, family="Sarabun"))

    fig.add_trace(go.Scatter(
        x=freqs, y=r_vals, mode='lines+markers', name='‡∏´‡∏π‡∏Ç‡∏ß‡∏≤ (Right)',
        line=dict(color='red'), marker=dict(symbol='circle-open', size=12, line=dict(width=2))
    ))

    fig.add_trace(go.Scatter(
        x=freqs, y=l_vals, mode='lines+markers', name='‡∏´‡∏π‡∏ã‡πâ‡∏≤‡∏¢ (Left)',
        line=dict(color='blue'), marker=dict(symbol='x-thin', size=12, line=dict(width=2))
    ))

    fig.update_layout(
        title='‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Å‡∏±‡∏ö‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏™‡∏π‡∏ç‡πÄ‡∏™‡∏µ‡∏¢‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô',
        xaxis_title='‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡πÄ‡∏™‡∏µ‡∏¢‡∏á (Hz)',
        yaxis_title='‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡πÑ‡∏î‡πâ‡∏¢‡∏¥‡∏ô (dB HL)',
        yaxis=dict(autorange='reversed', range=[-10, 120]),
        xaxis=dict(type='category'),
        legend=dict(x=0.01, y=0.99, bordercolor="black", borderwidth=1),
        template="streamlit",
        margin=dict(l=20, r=20, t=40, b=20),
        font_family="Sarabun"
    )
    st.plotly_chart(fig, use_container_width=True)


# --- 4. ‡πÅ‡∏î‡∏ä‡∏ö‡∏≠‡∏£‡πå‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ---

def plot_risk_radar(person_data):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÄ‡∏£‡∏î‡∏≤‡∏£‡πå‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á ‡∏û‡∏£‡πâ‡∏≠‡∏°‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢"""
    st.caption("‡∏Å‡∏£‡∏≤‡∏ü‡∏ô‡∏µ‡πâ‡∏™‡∏£‡∏∏‡∏õ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á 5 ‡∏î‡πâ‡∏≤‡∏ô ‡∏¢‡∏¥‡πà‡∏á‡∏û‡∏∑‡πâ‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏µ‡∏Å‡∏ß‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡πÄ‡∏ö‡πâ‡πÑ‡∏õ‡∏ó‡∏≤‡∏á‡∏Ç‡∏≠‡∏ö‡∏ô‡∏≠‡∏Å ‡∏´‡∏°‡∏≤‡∏¢‡∏ñ‡∏∂‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°‡∏™‡∏π‡∏á‡∏Ç‡∏∂‡πâ‡∏ô (‡∏£‡∏∞‡∏î‡∏±‡∏ö 1 ‡∏Ñ‡∏∑‡∏≠‡∏õ‡∏Å‡∏ï‡∏¥, 5 ‡∏Ñ‡∏∑‡∏≠‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å)")

    def normalize(value, thresholds, higher_is_better=False):
        if value is None: return 1
        scores = list(range(1, len(thresholds) + 2))
        if higher_is_better:
            thresholds = sorted(thresholds) 
            for i, threshold in enumerate(thresholds):
                if value < threshold: return scores[i]
            return scores[-1]
        else: # Lower is better
            thresholds = sorted(thresholds)
            for i, threshold in enumerate(thresholds):
                if value <= threshold: return scores[i]
            return scores[-1]


    bmi = get_float(person_data, 'BMI')
    if bmi is None:
        weight = get_float(person_data, '‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å')
        height = get_float(person_data, '‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á')
        if weight and height:
            bmi = weight / ((height/100)**2)

    categories = ['BMI', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô (SBP)', '‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• (FBS)', '‡πÑ‡∏Ç‡∏°‡∏±‡∏ô (LDL)', '‡πÑ‡∏ï (GFR)']
    values = [
        normalize(bmi, [22.9, 24.9, 29.9, 35]),
        normalize(get_float(person_data, 'SBP'), [120, 130, 140, 160]),
        normalize(get_float(person_data, 'FBS'), [99, 125, 150, 200]),
        normalize(get_float(person_data, 'LDL'), [129, 159, 189, 220]),
        normalize(get_float(person_data, 'GFR'), [60, 90], higher_is_better=True)
    ]

    fig = go.Figure()

    fig.add_trace(go.Scatterpolar(
        r=values,
        theta=categories,
        fill='toself',
        name='‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á'
    ))

    fig.update_layout(
        polar=dict(
            radialaxis=dict(
                visible=True,
                range=[1, 5],
                tickvals=[1, 2, 3, 4, 5],
                ticktext=['‡∏õ‡∏Å‡∏ï‡∏¥', '‡πÄ‡∏£‡∏¥‡πà‡∏°‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á', '‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á', '‡∏™‡∏π‡∏á', '‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å']
            )),
        showlegend=False,
        title="‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÄ‡∏™‡∏µ‡πà‡∏¢‡∏á‡πÇ‡∏£‡∏Ñ‡πÑ‡∏°‡πà‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÄ‡∏£‡∏∑‡πâ‡∏≠‡∏£‡∏±‡∏á (NCDs)",
        font_family="Sarabun",
        template="streamlit"
    )
    st.plotly_chart(fig, use_container_width=True)


# --- 5. ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö ---

def plot_lung_comparison(person_data):
    """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏ó‡πà‡∏á‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û‡∏õ‡∏≠‡∏î ‡∏û‡∏£‡πâ‡∏≠‡∏°‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡πà‡∏≤‡∏ö‡∏ô‡πÅ‡∏ó‡πà‡∏á"""
    fvc_actual = get_float(person_data, 'FVC')
    fvc_pred = get_float(person_data, 'FVC predic')
    fev1_actual = get_float(person_data, 'FEV1')
    fev1_pred = get_float(person_data, 'FEV1 predic')

    if fvc_actual is None or fev1_actual is None:
        st.info("‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û‡∏õ‡∏≠‡∏î")
        return

    categories = ['FVC (L)', 'FEV1 (L)']
    actual_vals = [fvc_actual, fev1_actual]
    pred_vals = [fvc_pred, fev1_pred]

    fig = go.Figure(data=[
        go.Bar(name='‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏ß‡∏±‡∏î‡πÑ‡∏î‡πâ (Actual)', x=categories, y=actual_vals, text=actual_vals, textposition='auto'),
        go.Bar(name='‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô (Predicted)', x=categories, y=pred_vals, text=pred_vals, textposition='auto')
    ])
    fig.update_traces(texttemplate='%{text:.2f}')
    fig.update_layout(
        barmode='group',
        title='‡πÄ‡∏õ‡∏£‡∏µ‡∏¢‡∏ö‡πÄ‡∏ó‡∏µ‡∏¢‡∏ö‡∏Ñ‡πà‡∏≤‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û‡∏õ‡∏≠‡∏î‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô',
        yaxis_title='‡∏•‡∏¥‡∏ï‡∏£ (L)',
        legend_title="‡∏Ñ‡πà‡∏≤",
        legend=dict(x=0.01, y=0.99),
        font_family="Sarabun",
        template="streamlit"
    )
    st.plotly_chart(fig, use_container_width=True)


# --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• ---
# --- START OF CHANGE: Add icons and adjust layout in main display function ---
def display_visualization_tab(person_data, history_df):
    """
    ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ó‡πá‡∏ö Visualization ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
    ‡∏ñ‡∏π‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡∏à‡∏≤‡∏Å app.py ‡πÅ‡∏•‡∏∞‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á Layout ‡πÉ‡∏´‡∏°‡πà
    """
    st.header(f"üìä ‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì: {person_data.get('‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•', '')}")
    st.markdown("---")

    # Section 1: Gauges and Radar (Current Year Snapshot)
    with st.container(border=True):
        st.subheader(f"üéØ ‡∏™‡∏£‡∏∏‡∏õ‡∏ú‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏†‡∏≤‡∏û‡∏£‡∏ß‡∏° (‡∏õ‡∏µ ‡∏û.‡∏®. {person_data.get('Year', '')})")
        col1, col2 = st.columns([2, 3])
        with col1:
            plot_risk_radar(person_data)
        with col2:
            plot_gauge_charts(person_data)

    # Section 2: Trends (Historical View)
    with st.container(border=True):
        st.subheader("üìà ‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡πÅ‡∏ô‡∏ß‡πÇ‡∏ô‡πâ‡∏°‡∏ú‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏¢‡πâ‡∏≠‡∏ô‡∏´‡∏•‡∏±‡∏á")
        plot_historical_trends(history_df)

    # Section 3: Performance graphs (Current Year Details)
    with st.container(border=True):
        st.subheader(f" ‡πÄ‡∏à‡∏≤‡∏∞‡∏•‡∏∂‡∏Å‡∏™‡∏°‡∏£‡∏£‡∏ñ‡∏†‡∏≤‡∏û‡∏£‡πà‡∏≤‡∏á‡∏Å‡∏≤‡∏¢ (‡∏õ‡∏µ ‡∏û.‡∏®. {person_data.get('Year', '')})")
        col3, col4 = st.columns(2)
        with col3:
            plot_audiogram(person_data)
        with col4:
            plot_lung_comparison(person_data)
# --- END OF CHANGE ---

