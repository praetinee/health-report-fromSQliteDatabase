import streamlit as st
import sqlite3
import requests
import pandas as pd
import io
import tempfile
import html  # Used for html.escape()
import numpy as np
from collections import OrderedDict
from datetime import datetime
import re

def is_empty(val):
    return str(val).strip().lower() in ["", "-", "none", "nan", "null"]

# --- Global Helper Functions: START ---

# Define Thai month mappings (global to these functions)
THAI_MONTHS_GLOBAL = {
    1: "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", 2: "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", 3: "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", 4: "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô",
    5: "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", 6: "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô", 7: "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", 8: "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°",
    9: "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", 10: "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", 11: "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", 12: "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
}
THAI_MONTH_ABBR_TO_NUM_GLOBAL = {
    "‡∏°.‡∏Ñ.": 1, "‡∏°.‡∏Ñ": 1, "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°": 1,
    "‡∏Å.‡∏û.": 2, "‡∏Å.‡∏û": 2, "‡∏Å‡∏û": 2, "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå": 2,
    "‡∏°‡∏µ.‡∏Ñ.": 3, "‡∏°‡∏µ.‡∏Ñ": 3, "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°": 3,
    "‡πÄ‡∏°.‡∏¢.": 4, "‡πÄ‡∏°.‡∏¢": 4, "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô": 4,
    "‡∏û.‡∏Ñ.": 5, "‡∏û.‡∏Ñ": 5, "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°": 5,
    "‡∏°‡∏¥.‡∏¢.": 6, "‡∏°‡∏¥.‡∏¢": 6, "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô": 6,
    "‡∏Å.‡∏Ñ.": 7, "‡∏Å.‡∏Ñ": 7, "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°": 7,
    "‡∏™.‡∏Ñ.": 8, "‡∏™.‡∏Ñ": 8, "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°": 8,
    "‡∏Å.‡∏¢.": 9, "‡∏Å.‡∏¢": 9, "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô": 9,
    "‡∏ï.‡∏Ñ.": 10, "‡∏ï.‡∏Ñ": 10, "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°": 10,
    "‡∏û.‡∏¢.": 11, "‡∏û.‡∏¢": 11, "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô": 11,
    "‡∏ò.‡∏Ñ.": 12, "‡∏ò.‡∏Ñ": 12, "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°": 12
}

# Function to normalize and convert Thai dates
def normalize_thai_date(date_str):
    if is_empty(date_str):
        return "-"
    
    s = str(date_str).strip().replace("‡∏û.‡∏®.", "").replace("‡∏û‡∏®.", "").strip()

    if s.lower() in ["‡πÑ‡∏°‡πà‡∏ï‡∏£‡∏ß‡∏à", "‡∏ô‡∏±‡∏î‡∏ó‡∏µ‡πà‡∏´‡∏•‡∏±‡∏á", "‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏Ç‡πâ‡∏≤‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à", ""]:
        return s

    try:
        # Format: DD/MM/YYYY (e.g., 29/04/2565)
        if re.match(r'^\d{1,2}/\d{1,2}/\d{4}$', s):
            day, month, year = map(int, s.split('/'))
            if year > 2500: # Assume Thai Buddhist year if year > 2500
                year -= 543
            dt = datetime(year, month, day)
            return f"{dt.day} {THAI_MONTHS_GLOBAL[dt.month]} {dt.year + 543}".replace('.', '')

        # Format: DD-MM-YYYY (e.g., 29-04-2565)
        if re.match(r'^\d{1,2}-\d{1,2}-\d{4}$', s):
            day, month, year = map(int, s.split('-'))
            if year > 2500: # Assume Thai Buddhist year if year > 2500
                year -= 543
            dt = datetime(year, month, day)
            return f"{dt.day} {THAI_MONTHS_GLOBAL[dt.month]} {dt.year + 543}".replace('.', '')

        # Format: DD MonthNameYYYY (e.g., 8 ‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô 2565) or DD-DD MonthNameYYYY (e.g., 15-16 ‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏° 2564)
        match_thai_text_date = re.match(r'^(?P<day1>\d{1,2})(?:-\d{1,2})?\s*(?P<month_str>[‡∏Å-‡∏Æ]+\.?)\s*(?P<year>\d{4})$', s)
        if match_thai_text_date:
            day = int(match_thai_text_date.group('day1'))
            month_str = match_thai_text_date.group('month_str').strip().replace('.', '')
            year = int(match_thai_text_date.group('year'))
            
            month_num = THAI_MONTH_ABBR_TO_NUM_GLOBAL.get(month_str)
            if month_num:
                try:
                    dt = datetime(year - 543, month_num, day)
                    return f"{day} {THAI_MONTHS_GLOBAL[dt.month]} {year}".replace('.', '')
                except ValueError:
                    pass

    except Exception:
        pass

    # Fallback to pandas for robust parsing if other specific regex fail
    try:
        parsed_dt = pd.to_datetime(s, dayfirst=True, errors='coerce')
        if pd.notna(parsed_dt):
            current_ce_year = datetime.now().year
            if parsed_dt.year > current_ce_year + 50 and parsed_dt.year - 543 > 1900:
                parsed_dt = parsed_dt.replace(year=parsed_dt.year - 543)
            return f"{parsed_dt.day} {THAI_MONTHS_GLOBAL[parsed_dt.month]} {parsed_dt.year + 543}".replace('.', '')
    except Exception:
        pass

    return s

# (‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏ñ‡∏π‡∏Å‡∏Ñ‡∏á‡πÑ‡∏ß‡πâ‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°...)

# ... [‡∏¢‡πà‡∏≠‡∏™‡πà‡∏ß‡∏ô helper functions ‡πÄ‡∏î‡∏¥‡∏°, ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÉ‡∏ô‡πÑ‡∏ü‡∏•‡πå‡∏ï‡πâ‡∏ô‡∏â‡∏ö‡∏±‡∏ö‡∏ó‡∏µ‡πà‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡πà‡∏á‡∏°‡∏≤] ...

# ... [‡πÇ‡∏Ñ‡πâ‡∏î‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£ UI, Sidebar, Form, ‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤ ‡∏Ø‡∏•‡∏Ø ...‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°] ...

# ==================== Display Health Report (Main Content) ====================
if "person_row" in st.session_state and st.session_state.get("selected_row_found", False):
    # ... [‡∏™‡πà‡∏ß‡∏ô‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏´‡∏•‡∏±‡∏Å, ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏´‡πá‡∏ô‡πÅ‡∏û‡∏ó‡∏¢‡πå, ‡∏ï‡∏≤‡∏£‡∏≤‡∏á ‡∏Ø‡∏•‡∏Ø ...‡πÄ‡∏´‡∏°‡∏∑‡∏≠‡∏ô‡πÄ‡∏î‡∏¥‡∏°] ...

    # === ‡∏õ‡∏∏‡πà‡∏° "‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô" ===
    st.markdown("""
        <style>
        .print-button {
            display: flex;
            justify-content: flex-end;
            margin-top: 24px;
            margin-bottom: 24px;
        }
        .print-button button {
            background: #1b5e20;
            color: white;
            border: none;
            border-radius: 5px;
            padding: 0.6rem 2rem;
            font-size: 1rem;
            cursor: pointer;
            transition: background 0.2s;
            font-family: 'Sarabun', sans-serif;
        }
        .print-button button:hover {
            background: #388e3c;
        }
        @media print {
            .print-button { display: none !important; }
            footer, header { display: none !important; }
        }
        </style>
        <div class="print-button">
            <button onclick="window.print()">üñ®Ô∏è ‡∏û‡∏¥‡∏°‡∏û‡πå‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô</button>
        </div>
    """, unsafe_allow_html=True)
