import streamlit as st
import sqlite3
import requests
import pandas as pd
import io
import tempfile
import html  # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö html.escape()

@st.cache_data(ttl=600)
def load_sqlite_data():
    try:
        file_id = "1HruO9AMrUfniC8hBWtumVdxLJayEc1Xr"
        download_url = f"https://drive.google.com/uc?export=download&id={file_id}"
        response = requests.get(download_url)
        response.raise_for_status()

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á temp file ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ sqlite3 ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ
        tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".db")
        tmp.write(response.content)
        tmp.flush()
        tmp.close()

        conn = sqlite3.connect(tmp.name)
        df = pd.read_sql_query("SELECT * FROM health_data", conn)
        conn.close()

        # Strip & ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        df.columns = df.columns.str.strip()
        df['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'] = df['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'].astype(str).str.strip()
        df['HN'] = df['HN'].astype(str).str.strip()
        df['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'] = df['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'].astype(str).str.strip()
        df['Year'] = df['Year'].astype(int)

        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢ / ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà - ‡∏´‡∏£‡∏∑‡∏≠ None
        df.replace(["-", "None", None], pd.NA, inplace=True)

        return df
    except Exception as e:
        st.error(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        st.stop()

df = load_sqlite_data()

# ==================== UI SEARCH FORM ====================
st.markdown("<h1 style='text-align:center;'>‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</h1>", unsafe_allow_html=True)
st.markdown("<h4 style='text-align:center; color:gray;'>- ‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏ß‡πÄ‡∏ß‡∏ä‡∏Å‡∏£‡∏£‡∏° ‡∏£‡∏û.‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ -</h4>", unsafe_allow_html=True)

with st.form("search_form"):
    col1, col2, col3 = st.columns(3)
    id_card = col1.text_input("‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô")
    hn = col2.text_input("HN")
    full_name = col3.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•")
    submitted = st.form_submit_button("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")

if submitted:
    query = df.copy()

    if id_card.strip():
        query = query[query["‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"] == id_card.strip()]
    if hn.strip():
        try:
            hn_val = float(hn.strip())
            query = query[np.isclose(query["HN"], hn_val)]
        except ValueError:
            st.error("‚ùå HN ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô 12345 ‡∏´‡∏£‡∏∑‡∏≠ 100.0")
            st.stop()
    if full_name.strip():
        query = query[query["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"].str.strip() == full_name.strip()]

    if query.empty:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        st.session_state.pop("search_result", None)
    else:
        st.session_state["search_result"] = query

# ==================== SELECT YEAR FROM RESULTS ====================
if "search_result" in st.session_state:
    results_df = st.session_state["search_result"]

    available_years = sorted(results_df["Year"].dropna().unique().astype(int), reverse=True)
    selected_year = st.selectbox(
        "üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô", 
        options=available_years,
        format_func=lambda y: f"‡∏û.‡∏®. {y}"
    )

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    person_year_df = results_df[results_df["Year"] == selected_year]

    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÉ‡∏ô‡∏õ‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    exam_dates = person_year_df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à"].dropna().unique()
    if len(person_year_df) > 1:
        date_buttons = []
        for idx, row in person_year_df.iterrows():
            label = row["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à"] if pd.notna(row["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à"]) else f"‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {idx+1}"
            if st.button(label, key=f"checkup_{idx}"):
                st.session_state["person_row"] = row.to_dict()
    else:
        st.session_state["person_row"] = person_year_df.iloc[0].to_dict()

if "person_row" in st.session_state:
    person = st.session_state["person_row"]
    year_display = person.get("Year", "-")

    def interpret_bp(sbp, dbp):
        try:
            sbp = float(sbp)
            dbp = float(dbp)
            if sbp == 0 or dbp == 0:
                return "-"
            if sbp >= 160 or dbp >= 100:
                return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á"
            elif sbp >= 140 or dbp >= 90:
                return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
            elif sbp < 120 and dbp < 80:
                return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥"
            else:
                return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á"
        except:
            return "-"

    def combined_health_advice(bmi, sbp, dbp):
        try:
            bmi = float(bmi)
        except:
            bmi = None
        try:
            sbp = float(sbp)
            dbp = float(dbp)
        except:
            sbp = dbp = None

        if bmi is None:
            bmi_text = ""
        elif bmi > 30:
            bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏°‡∏≤‡∏Å"
        elif bmi >= 25:
            bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"
        elif bmi < 18.5:
            bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"
        else:
            bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥"

        if sbp is None or dbp is None:
            bp_text = ""
        elif sbp >= 160 or dbp >= 100:
            bp_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å"
        elif sbp >= 140 or dbp >= 90:
            bp_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á"
        elif sbp >= 120 or dbp >= 80:
            bp_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏π‡∏á"
        else:
            bp_text = ""

        if not bmi_text and not bp_text:
            return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"
        if "‡∏õ‡∏Å‡∏ï‡∏¥" in bmi_text and not bp_text:
            return "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏î‡∏µ ‡∏Ñ‡∏ß‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡∏ï‡πà‡∏≠‡πÑ‡∏õ"
        if not bmi_text and bp_text:
            return f"{bp_text} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠"
        if bmi_text and bp_text:
            return f"{bmi_text} ‡πÅ‡∏•‡∏∞ {bp_text} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢"
        return f"{bmi_text} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"

    # ===== ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å =====
    sbp = person.get("SBP", "")
    dbp = person.get("DBP", "")
    pulse = person.get("pulse", "-")
    weight = person.get("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å", "-")
    height = person.get("‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á", "-")
    waist = person.get("‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß", "-")
    check_date = person.get("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à", "-")

    try:
        weight_val = float(str(weight).replace("‡∏Å‡∏Å.", "").strip())
        height_val = float(str(height).replace("‡∏ã‡∏°.", "").strip())
        bmi_val = weight_val / ((height_val / 100) ** 2)
    except:
        bmi_val = None

    sbp_val = f"{sbp}/{dbp} ‡∏°.‡∏°.‡∏õ‡∏£‡∏≠‡∏ó" if sbp and dbp else "-"
    bp_desc = interpret_bp(sbp, dbp)
    bp_full = f"{sbp_val} - {bp_desc}" if bp_desc != "-" else sbp_val

    pulse = f"{pulse} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ" if pulse not in ["-", None, "nan"] else "-"
    weight = f"{weight} ‡∏Å‡∏Å." if weight not in ["-", None, "nan"] else "-"
    height = f"{height} ‡∏ã‡∏°." if height not in ["-", None, "nan"] else "-"
    waist = f"{waist} ‡∏ã‡∏°." if waist not in ["-", None, "nan"] else "-"

    summary_advice = html.escape(combined_health_advice(bmi_val, sbp, dbp))

    # ===== ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• =====
    st.markdown(f"""
    <div style="font-size: 18px; line-height: 1.8; color: inherit; padding: 24px 8px;">
        <div style="text-align: center; font-size: 22px; font-weight: bold;">‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</div>
        <div style="text-align: center;">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à: {check_date or "-"}</div>
        <div style="text-align: center; margin-top: 10px;">
            ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ 201 ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 11 ‡∏ñ‡∏ô‡∏ô ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà - ‡∏û‡∏£‡πâ‡∏≤‡∏ß<br>
            ‡∏ï‡∏≥‡∏ö‡∏•‡∏´‡∏ô‡∏≠‡∏á‡∏´‡∏≤‡∏£ ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà 50290 ‡πÇ‡∏ó‡∏£ 053 921 199 ‡∏ï‡πà‡∏≠ 167
        </div>
        <hr style="margin: 24px 0;">
        <div style="display: flex; flex-wrap: wrap; justify-content: center; gap: 32px; margin-bottom: 20px; text-align: center;">
            <div><b>‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•:</b> {person.get('‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•', '-')}</div>
            <div><b>‡∏≠‡∏≤‡∏¢‡∏∏:</b> {person.get('‡∏≠‡∏≤‡∏¢‡∏∏', '-')} ‡∏õ‡∏µ</div>
            <div><b>‡πÄ‡∏û‡∏®:</b> {person.get('‡πÄ‡∏û‡∏®', '-')}</div>
            <div><b>HN:</b> {person.get('HN', '-')}</div>
            <div><b>‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô:</b> {person.get('‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô', '-')}</div>
        </div>
        <div style="display: flex; flex-wrap: wrap; justify-content: center; gap: 32px; margin-bottom: 16px; text-align: center;">
            <div><b>‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å:</b> {weight}</div>
            <div><b>‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á:</b> {height}</div>
            <div><b>‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß:</b> {waist}</div>
            <div><b>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï:</b> {bp_full}</div>
            <div><b>‡∏ä‡∏µ‡∏û‡∏à‡∏£:</b> {pulse}</div>
        </div>
        <div style="margin-top: 16px; text-align: center;">
            <b>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</b> {summary_advice}
        </div>
    </div>
    """, unsafe_allow_html=True)
