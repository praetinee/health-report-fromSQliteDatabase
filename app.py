import streamlit as st
import sqlite3
import pandas as pd
import requests
import os

st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", layout="wide")
st.title("ü©∫ ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û (‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å Google Drive)")

# ===== ‡∏î‡∏≤‡∏ß‡∏ô‡πå‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå .db ‡∏à‡∏≤‡∏Å Google Drive =====
@st.cache_resource
def download_db_from_drive():
    file_id = "1HruO9AMrUfniC8hBWtumVdxLJayEc1Xr"  # <-- ‡πÉ‡∏ä‡πâ‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
    url = f"https://drive.google.com/uc?id={file_id}&export=download"
    output_path = "temp_db.db"

    if not os.path.exists(output_path):
        response = requests.get(url)
        with open(output_path, "wb") as f:
            f.write(response.content)

    return output_path

DB_PATH = download_db_from_drive()

# ===== ‡πÅ‡∏™‡∏î‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏î‡∏π‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå =====
@st.cache_data(ttl=300)
def get_preview():
    conn = sqlite3.connect(DB_PATH)
    df = pd.read_sql_query("SELECT * FROM health_data LIMIT 5", conn)
    conn.close()
    return df

st.subheader("üìã ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•")
try:
    preview = get_preview()
    st.dataframe(preview)
    st.write("üîë ‡∏ä‡∏∑‡πà‡∏≠‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î:", preview.columns.tolist())
except Exception as e:
    st.error("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÑ‡∏î‡πâ")
    st.exception(e)

# ===== ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏î‡πâ‡∏ß‡∏¢ HN / ‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏• / ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ‡∏ß. =====
st.subheader("üîç ‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û")
search = st.text_input("‡∏Å‡∏£‡∏≠‡∏Å HN ‡∏´‡∏£‡∏∑‡∏≠ ‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏• ‡∏´‡∏£‡∏∑‡∏≠ ‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ‡∏ß.")

if search:
    try:
        conn = sqlite3.connect(DB_PATH)
        query = """
            SELECT * FROM health_data
            WHERE [HN] LIKE ? OR [‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•] LIKE ? OR [‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà ‡∏ß.] LIKE ?
        """
        df = pd.read_sql_query(query, conn, params=(f"%{search}%", f"%{search}%", f"%{search}%"))
        conn.close()

        if df.empty:
            st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
        else:
            st.success(f"‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• {len(df)} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£")
            st.dataframe(df)

            st.subheader("üìå ‡∏™‡∏£‡∏∏‡∏õ‡∏Ñ‡πà‡∏≤‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ")
            basic_cols = ["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à", "‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•", "‡πÄ‡∏û‡∏®", "‡∏≠‡∏≤‡∏¢‡∏∏", "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å", "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á", "‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß", "BMI", "SBP", "DBP", "pulse"]
            use_cols = [col for col in basic_cols if col in df.columns]
            if "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à" in use_cols:
                st.table(df[use_cols].set_index("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à"))
            else:
                st.table(df[use_cols])
    except Exception as e:
        st.error("‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏Ç‡∏ì‡∏∞‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
        st.exception(e)
