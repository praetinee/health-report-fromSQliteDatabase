import streamlit as st
import pandas as pd
import sqlite3
import requests

st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", layout="wide")

# ==================== FONT ====================
st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Chakra+Petch&display=swap');
    html, body, [class*="css"] {
        font-family: 'Chakra Petch', sans-serif !important;
    }
    </style>
""", unsafe_allow_html=True)

# ==================== STYLE ====================
st.markdown("""
<style>
    .doctor-section {
        font-size: 16px;
        line-height: 1.8;
        margin-top: 2rem;
    }
    .summary-box {
        background-color: #dcedc8;
        padding: 12px 18px;
        font-weight: bold;
        border-radius: 6px;
        margin-bottom: 1.5rem;
    }
    .appointment-box {
        background-color: #ffcdd2;
        padding: 12px 18px;
        border-radius: 6px;
        margin-bottom: 1.5rem;
    }
    .remark {
        font-weight: bold;
        margin-top: 2rem;
    }
    .footer {
        display: flex;
        justify-content: space-between;
        margin-top: 3rem;
        font-size: 16px;
    }
    .footer .right {
        text-align: right;
    }
</style>
""", unsafe_allow_html=True)

# ==================== FUNCTION: Normalize HN ====================
def normalize_hn(val):
    if val is None:
        return ""
    try:
        s = str(val).strip()
        if s.lower() in ["", "nan", "none", "-"]:
            return ""
        return str(int(float(s)))
    except:
        return ""

# ==================== LOAD DATABASE FROM GOOGLE DRIVE ====================
@st.cache_data
def load_database():
    file_id = "1HruO9AMrUfniC8hBWtumVdxLJayEc1Xr"
    url = f"https://drive.google.com/uc?export=download&id={file_id}"
    output_path = "health_data.db"

    response = requests.get(url)
    if response.status_code == 200:
        with open(output_path, "wb") as f:
            f.write(response.content)
    else:
        st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Drive ‡πÑ‡∏î‡πâ")
        st.stop()

    conn = sqlite3.connect(output_path)
    df = pd.read_sql_query("SELECT * FROM health_data", conn)
    conn.close()
    return df

# ==================== MAIN ====================
st.title("üìä ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û")

with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
    df = load_database()

st.success("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

df.columns = df.columns.str.strip()

if "HN" in df.columns:
    df["HN"] = df["HN"].apply(normalize_hn)

# ==================== YEAR MAPPING ====================
years = sorted(df["Year"].dropna().unique())
columns_by_year = {
    y: {
        "weight": "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å",
        "height": "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á",
        "waist": "‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß",
        "sbp": "SBP",
        "dbp": "DBP",
        "pulse": "pulse",
    }
    for y in years
}

# ==================== SEARCH FORM ====================
with st.form("search_form"):
    col1, col2, col3 = st.columns(3)
    id_card = col1.text_input("‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô")
    hn = col2.text_input("HN")
    full_name = col3.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•")
    submitted = st.form_submit_button("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")

# ==================== SEARCH & DISPLAY ====================
if submitted:
    filtered = df.copy()

    if id_card:
        filtered = filtered[filtered['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'].astype(str).str.strip() == id_card.strip()]
    if hn:
        hn = normalize_hn(hn)
        filtered = filtered[filtered["HN"] == hn]
    if full_name:
        filtered = filtered[filtered['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'].astype(str).str.strip() == full_name.strip()]

    if filtered.empty:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
        st.session_state["filtered_data"] = None
    else:
        st.session_state["filtered_data"] = filtered

if "filtered_data" in st.session_state and st.session_state["filtered_data"] is not None:
    filtered = st.session_state["filtered_data"]

    years = sorted(filtered["Year"].dropna().unique())[::-1]
    selected_year = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ ‡∏û.‡∏®.", years)

    person_records = filtered[filtered["Year"] == selected_year]

    if person_records.empty:
        st.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÉ‡∏ô‡∏õ‡∏µ {selected_year} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ô‡∏µ‡πâ")
    else:
        if "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à" in person_records.columns:
            try:
                person_records["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à"] = pd.to_datetime(person_records["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à"], errors="coerce")
                person_records = person_records.sort_values("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à")
            except:
                st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏î‡πâ")
        else:
            st.info("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à")

        def interpret_bmi(bmi):
            try:
                bmi = float(bmi)
                if bmi > 30:
                    return "‡∏≠‡πâ‡∏ß‡∏ô‡∏°‡∏≤‡∏Å"
                elif bmi >= 25:
                    return "‡∏≠‡πâ‡∏ß‡∏ô"
                elif bmi >= 23:
                    return "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô"
                elif bmi >= 18.5:
                    return "‡∏õ‡∏Å‡∏ï‡∏¥"
                else:
                    return "‡∏ú‡∏≠‡∏°"
            except:
                return "-"

        def interpret_bp(sbp, dbp):
            try:
                sbp = float(sbp)
                dbp = float(dbp)
                if sbp == 0 or dbp == 0:
                    return "-"
                if sbp >= 160 or dbp >= 100:
                    return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á"
                elif sbp >= 140 or dbp >= 90:
                    return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
                elif sbp < 120 and dbp < 80:
                    return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥"
                else:
                    return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á"
            except:
                return "-"

        def combined_health_advice(bmi, sbp, dbp):
            try:
                bmi = float(bmi)
            except:
                bmi = None
            try:
                sbp = float(sbp)
                dbp = float(dbp)
            except:
                sbp = dbp = None

            if bmi is None:
                bmi_text = ""
            elif bmi > 30:
                bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏°‡∏≤‡∏Å"
            elif bmi >= 25:
                bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"
            elif bmi < 18.5:
                bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"
            else:
                bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥"

            if sbp is None or dbp is None:
                bp_text = ""
            elif sbp >= 160 or dbp >= 100:
                bp_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å"
            elif sbp >= 140 or dbp >= 90:
                bp_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á"
            elif sbp >= 120 or dbp >= 80:
                bp_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏π‡∏á"
            else:
                bp_text = ""

            if not bmi_text and not bp_text:
                return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"

            if "‡∏õ‡∏Å‡∏ï‡∏¥" in bmi_text and not bp_text:
                return "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏î‡∏µ ‡∏Ñ‡∏ß‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡∏ï‡πà‡∏≠‡πÑ‡∏õ"

            if not bmi_text and bp_text:
                return f"{bp_text} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠"

            if bmi_text and bp_text:
                return f"{bmi_text} ‡πÅ‡∏•‡∏∞ {bp_text} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢"

            return f"{bmi_text} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"

        num_visits = len(person_records)
        if num_visits == 1:
            row = person_records.iloc[0]
            st.info(f"‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏õ‡∏µ {selected_year}")
            st.write(row)
        else:
            st.success(f"‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à {num_visits} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏õ‡∏µ {selected_year}")
            for idx, (_, row) in enumerate(person_records.iterrows(), start=1):
                with st.expander(f"‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {idx}"):
                    weight = row.get("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å")
                    height = row.get("‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á")
                    sbp = row.get("SBP")
                    dbp = row.get("DBP")

                    bmi = None
                    if height and weight:
                        try:
                            h_m = float(height) / 100
                            bmi = round(float(weight) / (h_m ** 2), 2)
                        except:
                            bmi = None

                    st.markdown(f"**BMI:** {bmi if bmi else '-'} ({interpret_bmi(bmi)})")
                    st.markdown(f"**BP:** {sbp}/{dbp} ({interpret_bp(sbp, dbp)})")
                    st.markdown(f"**‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** {combined_health_advice(bmi, sbp, dbp)}")
                    st.divider()
