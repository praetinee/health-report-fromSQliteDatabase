import streamlit as st
import pandas as pd
import sqlite3
import requests

# ==================== FUNCTION: Check Missing Values ====================
def is_missing(value):
    if pd.isna(value):
        return True
    value = str(value).strip().lower()
    return value in ["", "-", "nan", "none", "null"]

st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", layout="wide")

# ==================== FONT ====================
st.markdown("""
    <style>
    @import url('https://fonts.googleapis.com/css2?family=Chakra+Petch&display=swap');
    html, body, [class*="css"] {
        font-family: 'Chakra Petch', sans-serif !important;
    }
    </style>
""", unsafe_allow_html=True)

# ==================== STYLE ====================
st.markdown("""
<style>
    .doctor-section {
        font-size: 16px;
        line-height: 1.8;
        margin-top: 2rem;
    }
    .summary-box {
        background-color: #dcedc8;
        padding: 12px 18px;
        font-weight: bold;
        border-radius: 6px;
        margin-bottom: 1.5rem;
    }
    .appointment-box {
        background-color: #ffcdd2;
        padding: 12px 18px;
        border-radius: 6px;
        margin-bottom: 1.5rem;
    }
    .remark {
        font-weight: bold;
        margin-top: 2rem;
    }
    .footer {
        display: flex;
        justify-content: space-between;
        margin-top: 3rem;
        font-size: 16px;
    }
    .footer .right {
        text-align: right;
    }
</style>
""", unsafe_allow_html=True)

# ==================== FUNCTION: Normalize HN ====================
def normalize_hn(val):
    if val is None:
        return ""
    try:
        s = str(val).strip()
        if s.lower() in ["", "nan", "none", "-"]:
            return ""
        return str(int(float(s)))
    except:
        return ""

# ==================== LOAD DATABASE FROM GOOGLE DRIVE ====================
@st.cache_data
def load_database():
    file_id = "1HruO9AMrUfniC8hBWtumVdxLJayEc1Xr"
    url = f"https://drive.google.com/uc?export=download&id={file_id}"
    output_path = "health_data.db"

    response = requests.get(url)
    if response.status_code == 200:
        with open(output_path, "wb") as f:
            f.write(response.content)
    else:
        st.error("‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å Google Drive ‡πÑ‡∏î‡πâ")
        st.stop()

    conn = sqlite3.connect(output_path)
    df = pd.read_sql_query("SELECT * FROM health_data", conn)
    conn.close()
    return df

# ==================== MAIN ====================
st.title("üìä ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û")

with st.spinner("‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•..."):
    df = load_database()

st.success("‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß!")

df.columns = df.columns.str.strip()

if "HN" in df.columns:
    df["HN"] = df["HN"].apply(normalize_hn)

# ==================== YEAR MAPPING ====================
years = sorted(df["Year"].dropna().unique())
columns_by_year = {
    y: {
        "weight": "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å",
        "height": "‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á",
        "waist": "‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß",
        "sbp": "SBP",
        "dbp": "DBP",
        "pulse": "pulse",
    }
    for y in years
}

# ==================== SEARCH FORM ====================
with st.form("search_form"):
    col1, col2, col3 = st.columns(3)
    id_card = col1.text_input("‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô")
    hn = col2.text_input("HN")
    full_name = col3.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•")
    submitted = st.form_submit_button("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")

# ==================== SEARCH & DISPLAY ====================
if submitted:
    filtered = df.copy()

    if id_card:
        filtered = filtered[filtered['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'].astype(str).str.strip() == id_card.strip()]
    if hn:
        hn = normalize_hn(hn)
        filtered = filtered[filtered["HN"] == hn]
    if full_name:
        filtered = filtered[filtered['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'].astype(str).str.strip() == full_name.strip()]

    if filtered.empty:
        st.warning("‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏ï‡∏≤‡∏°‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")
        st.session_state["filtered_data"] = None
    else:
        st.session_state["filtered_data"] = filtered

if "filtered_data" in st.session_state and st.session_state["filtered_data"] is not None:
    filtered = st.session_state["filtered_data"]

    years = sorted(filtered["Year"].dropna().unique())[::-1]
    selected_year = st.selectbox("‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ ‡∏û.‡∏®.", years)

    person_records = filtered[filtered["Year"] == selected_year]

    if person_records.empty:
        st.warning(f"‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡πÉ‡∏ô‡∏õ‡∏µ {selected_year} ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ö‡∏∏‡∏Ñ‡∏Ñ‡∏•‡∏ô‡∏µ‡πâ")
    else:
        if "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à" in person_records.columns:
            try:
                person_records["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à"] = pd.to_datetime(person_records["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à"], errors="coerce")
                person_records = person_records.sort_values("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à")
            except:
                st.warning("‚ö†Ô∏è ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏à‡∏±‡∏î‡πÄ‡∏£‡∏µ‡∏¢‡∏á‡∏ï‡∏≤‡∏°‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÑ‡∏î‡πâ")
        else:
            st.info("‚ÑπÔ∏è ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ñ‡∏≠‡∏•‡∏±‡∏°‡∏ô‡πå‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à")

        def interpret_bmi(bmi):
            try:
                bmi = float(bmi)
                if bmi > 30:
                    return "‡∏≠‡πâ‡∏ß‡∏ô‡∏°‡∏≤‡∏Å"
                elif bmi >= 25:
                    return "‡∏≠‡πâ‡∏ß‡∏ô"
                elif bmi >= 23:
                    return "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô"
                elif bmi >= 18.5:
                    return "‡∏õ‡∏Å‡∏ï‡∏¥"
                else:
                    return "‡∏ú‡∏≠‡∏°"
            except:
                return "-"

        def interpret_bp(sbp, dbp):
            if is_missing(sbp) or is_missing(dbp):
                return "-"
            try:
                sbp = float(sbp)
                dbp = float(dbp)
                if sbp == 0 or dbp == 0:
                    return "-"
                if sbp >= 160 or dbp >= 100:
                    return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á"
                elif sbp >= 140 or dbp >= 90:
                    return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
                elif sbp < 120 and dbp < 80:
                    return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥"
                else:
                    return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á"
            except:
                return "-"

        def combined_health_advice(bmi, sbp, dbp):
            bmi_text = ""
            bp_text = ""
        
            if not is_missing(bmi):
                try:
                    bmi = float(bmi)
                    if bmi > 30:
                        bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏°‡∏≤‡∏Å"
                    elif bmi >= 25:
                        bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"
                    elif bmi < 18.5:
                        bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"
                    else:
                        bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥"
                except:
                    bmi_text = ""
        
            if not is_missing(sbp) and not is_missing(dbp):
                try:
                    sbp = float(sbp)
                    dbp = float(dbp)
                    if sbp >= 160 or dbp >= 100:
                        bp_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å"
                    elif sbp >= 140 or dbp >= 90:
                        bp_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á"
                    elif sbp >= 120 or dbp >= 80:
                        bp_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏π‡∏á"
                except:
                    pass
        
            if not bmi_text and not bp_text:
                return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"
            if "‡∏õ‡∏Å‡∏ï‡∏¥" in bmi_text and not bp_text:
                return "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏î‡∏µ ‡∏Ñ‡∏ß‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡∏ï‡πà‡∏≠‡πÑ‡∏õ"
            if not bmi_text and bp_text:
                return f"{bp_text} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠"
            if bmi_text and bp_text:
                return f"{bmi_text} ‡πÅ‡∏•‡∏∞ {bp_text} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢"
            return f"{bmi_text} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"

        num_visits = len(person_records)
        if num_visits == 1:
            row = person_records.iloc[0]
            st.info(f"‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à 1 ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏õ‡∏µ {selected_year}")
            st.write(row)
        else:
            st.success(f"‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à {num_visits} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡πÉ‡∏ô‡∏õ‡∏µ {selected_year}")
            for idx, (_, row) in enumerate(person_records.iterrows(), start=1):
                with st.expander(f"‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {idx}"):
                    weight = row.get("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å")
                    height = row.get("‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á")
                    sbp = row.get("SBP")
                    dbp = row.get("DBP")

                    bmi = None
                    if not is_missing(height) and not is_missing(weight):
                        try:
                            h_m = float(height) / 100
                            bmi = round(float(weight) / (h_m ** 2), 2)
                        except:
                            bmi = None

                    st.markdown(f"**BMI:** {bmi if bmi else '-'} ({interpret_bmi(bmi)})")
                    st.markdown(f"**BP:** {sbp}/{dbp} ({interpret_bp(sbp, dbp)})")
                    st.markdown(f"**‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:** {combined_health_advice(bmi, sbp, dbp)}")
                    st.divider()
# ==================== BLOOD COLUMN MAPPING (Dynamic) ====================
blood_columns_by_year = {
    y: {
        "FBS": "FBS",
        "Uric": "Uric Acid",
        "ALK": "ALP",
        "SGOT": "SGOT",
        "SGPT": "SGPT",
        "Cholesterol": "CHOL",
        "TG": "TGL",
        "HDL": "HDL",
        "LDL": "LDL",
        "BUN": "BUN",
        "Cr": "Cr",
        "GFR": "GFR",
    }
    for y in df["Year"].dropna().unique()
}

# ==================== CBC COLUMN MAPPING (Dynamic) ====================
from collections import defaultdict

cbc_columns_by_year = defaultdict(dict)

for y in df["Year"].dropna().unique():
    cbc_columns_by_year[y] = {
        "hb": "Hb(%)",
        "hct": "HCT",
        "wbc": "WBC (cumm)",
        "plt": "Plt (/mm)",
    }

    if y == 2568:
        cbc_columns_by_year[y].update({
            "ne": "Ne (%)",
            "ly": "Ly (%)",
            "eo": "Eo",
            "mo": "M",
            "ba": "BA",
            "rbc": "RBCmo",
            "mcv": "MCV",
            "mch": "MCH",
            "mchc": "MCHC",
        })

# ==================== INTERPRETATION HELPERS ====================
def interpret_alb(value):
    value = str(value).strip().lower()
    if value == "negative":
        return "‡πÑ‡∏°‡πà‡∏û‡∏ö"
    elif value in ["trace", "1+", "2+"]:
        return "‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
    elif value == "3+":
        return "‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞"
    return "-"

def interpret_sugar(value):
    value = str(value).strip().lower()
    if value == "negative":
        return "‡πÑ‡∏°‡πà‡∏û‡∏ö"
    elif value == "trace":
        return "‡∏û‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
    elif value in ["1+", "2+", "3+", "4+", "5+", "6+"]:
        return "‡∏û‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞"
    return "-"

def interpret_rbc(value):
    value = str(value).strip().lower()
    if value in ["0-1", "negative", "1-2", "2-3", "3-5"]:
        return "‡∏õ‡∏Å‡∏ï‡∏¥"
    elif value in ["5-10", "10-20"]:
        return "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÅ‡∏î‡∏á‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
    return "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÅ‡∏î‡∏á‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞"

def interpret_wbc(value):
    value = str(value).strip().lower()
    if value in ["0-1", "negative", "1-2", "2-3", "3-5"]:
        return "‡∏õ‡∏Å‡∏ï‡∏¥"
    elif value in ["5-10", "10-20"]:
        return "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
    return "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞"

def advice_urine(sex, alb, sugar, rbc, wbc):
    alb_text = interpret_alb(alb)
    sugar_text = interpret_sugar(sugar)
    rbc_text = interpret_rbc(rbc)
    wbc_text = interpret_wbc(wbc)

    if all(x in ["-", "‡∏õ‡∏Å‡∏ï‡∏¥", "‡πÑ‡∏°‡πà‡∏û‡∏ö", "‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", "‡∏û‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"]
           for x in [alb_text, sugar_text, rbc_text, wbc_text]):
        return ""

    if "‡∏û‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞" in sugar_text and "‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢" not in sugar_text:
        return "‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"

    if sex == "‡∏´‡∏ç‡∏¥‡∏á" and "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÅ‡∏î‡∏á" in rbc_text and "‡∏õ‡∏Å‡∏ï‡∏¥" in wbc_text:
        return "‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏ô‡πÄ‡∏õ‡∏∑‡πâ‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥"

    if sex == "‡∏ä‡∏≤‡∏¢" and "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÅ‡∏î‡∏á" in rbc_text and "‡∏õ‡∏Å‡∏ï‡∏¥" in wbc_text:
        return "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÅ‡∏î‡∏á‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞ ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"

    if "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞" in wbc_text and "‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢" not in wbc_text:
        return "‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥"

    return "‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡∏ã‡πâ‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•"

def interpret_stool_exam(value):
    if not value or value.strip() == "":
        return "-"
    if "‡∏õ‡∏Å‡∏ï‡∏¥" in value:
        return "‡∏õ‡∏Å‡∏ï‡∏¥"
    elif "‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÅ‡∏î‡∏á" in value:
        return "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÅ‡∏î‡∏á‡πÉ‡∏ô‡∏≠‡∏∏‡∏à‡∏à‡∏≤‡∏£‡∏∞ ‡∏ô‡∏±‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥"
    elif "‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß" in value:
        return "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß‡πÉ‡∏ô‡∏≠‡∏∏‡∏à‡∏à‡∏≤‡∏£‡∏∞ ‡∏ô‡∏±‡∏î‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥"
    return value.strip()

def interpret_stool_cs(value):
    if not value or value.strip() == "":
        return "-"
    if "‡πÑ‡∏°‡πà‡∏û‡∏ö" in value or "‡∏õ‡∏Å‡∏ï‡∏¥" in value:
        return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠"
    return "‡∏û‡∏ö‡∏Å‡∏≤‡∏£‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠‡πÉ‡∏ô‡∏≠‡∏∏‡∏à‡∏à‡∏≤‡∏£‡∏∞ ‡πÉ‡∏´‡πâ‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏±‡∏Å‡∏©‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"

# ==================== DISPLAY ====================
def is_missing(value):
    if pd.isna(value):
        return True
    value = str(value).strip().lower()
    return value in ["", "-", "nan", "none", "null"]

if "person" in st.session_state:
    person = st.session_state["person"]

    # ‡πÉ‡∏ä‡πâ‡∏õ‡∏µ‡∏à‡∏≤‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏£‡∏¥‡∏á‡∏ó‡∏µ‡πà‡∏°‡∏µ
    available_years = sorted(df["Year"].dropna().unique(), reverse=True)
    selected_year = st.selectbox("üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô", options=available_years)

    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÅ‡∏õ‡∏•‡∏ú‡∏• BMI ‡πÅ‡∏•‡∏∞ BP ‡∏ï‡∏≤‡∏°‡πÇ‡∏Ñ‡πâ‡∏î‡πÄ‡∏î‡∏¥‡∏°
    def render_health_report(person, selected_year):
        def get_val(key):
            val = person.get(key)
            return "-" if is_missing(val) else str(val).strip()

        sbp = get_val("SBP")
        dbp = get_val("DBP")
        pulse = get_val("pulse")
        weight = get_val("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å")
        height = get_val("‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á")
        waist = get_val("‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß")

        bp_result = "-"
        if not is_missing(sbp) and not is_missing(dbp):
            bp_val = f"{sbp}/{dbp} ‡∏°.‡∏°.‡∏õ‡∏£‡∏≠‡∏ó"
            bp_desc = interpret_bp(sbp, dbp)
            bp_result = f"{bp_val} - {bp_desc}"

        pulse_display = f"{pulse} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ" if not is_missing(pulse) else "-"
        weight_display = f"{weight} ‡∏Å‡∏Å." if not is_missing(weight) else "-"
        height_display = f"{height} ‡∏ã‡∏°." if not is_missing(height) else "-"
        waist_display = f"{waist} ‡∏ã‡∏°." if not is_missing(waist) else "-"

        try:
            weight_val = float(weight)
            height_val = float(height)
            bmi_val = weight_val / ((height_val / 100) ** 2)
        except:
            bmi_val = None

        summary_advice = combined_health_advice(bmi_val, sbp, dbp)
        bmi_text = f"{round(bmi_val, 2)} ({interpret_bmi(bmi_val)})" if bmi_val else "-"

        return f"""
        <div style="font-size: 18px; line-height: 1.8; color: inherit; padding: 24px 8px;">
            <div style="text-align: center; font-size: 22px; font-weight: bold;">‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</div>
            <div style="text-align: center;">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à: {get_val('‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à')}</div>
            <div style="text-align: center; margin-top: 10px;">
                ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ 201 ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 11 ‡∏ñ‡∏ô‡∏ô ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà - ‡∏û‡∏£‡πâ‡∏≤‡∏ß<br>
                ‡∏ï‡∏≥‡∏ö‡∏•‡∏´‡∏ô‡∏≠‡∏á‡∏´‡∏≤‡∏£ ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà 50290 ‡πÇ‡∏ó‡∏£ 053 921 199 ‡∏ï‡πà‡∏≠ 167
            </div>
            <hr style="margin: 24px 0;">
            <div style="display: flex; flex-wrap: wrap; justify-content: center; gap: 32px; margin-bottom: 20px; text-align: center;">
                <div><b>‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•:</b> {get_val('‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•')}</div>
                <div><b>‡∏≠‡∏≤‡∏¢‡∏∏:</b> {get_val('‡∏≠‡∏≤‡∏¢‡∏∏')} ‡∏õ‡∏µ</div>
                <div><b>‡πÄ‡∏û‡∏®:</b> {get_val('‡πÄ‡∏û‡∏®')}</div>
                <div><b>HN:</b> {get_val('HN')}</div>
                <div><b>‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô:</b> {get_val('‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô')}</div>
            </div>
            <div style="display: flex; flex-wrap: wrap; justify-content: center; gap: 32px; margin-bottom: 16px; text-align: center;">
                <div><b>‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å:</b> {weight_display}</div>
                <div><b>‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á:</b> {height_display}</div>
                <div><b>‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß:</b> {waist_display}</div>
                <div><b>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï:</b> {bp_result}</div>
                <div><b>‡∏ä‡∏µ‡∏û‡∏à‡∏£:</b> {pulse_display}</div>
                <div><b>BMI:</b> {bmi_text}</div>
            </div>
            <div style="margin-top: 16px; text-align: center;">
                <b>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</b> {summary_advice}
            </div>
        </div>
        """

    st.markdown(render_health_report(person, selected_year), unsafe_allow_html=True)
