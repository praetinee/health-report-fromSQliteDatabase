import streamlit as st
import sqlite3
import requests
import pandas as pd
import io
import tempfile
import html  # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö html.escape()
import numpy as np

@st.cache_data(ttl=600)
def load_sqlite_data():
    try:
        file_id = "1HruO9AMrUfniC8hBWtumVdxLJayEc1Xr"
        download_url = f"https://drive.google.com/uc?export=download&id={file_id}"
        response = requests.get(download_url)
        response.raise_for_status()

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á temp file ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ sqlite3 ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ
        tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".db")
        tmp.write(response.content)
        tmp.flush()
        tmp.close()

        conn = sqlite3.connect(tmp.name)
        df = pd.read_sql_query("SELECT * FROM health_data", conn)
        conn.close()

        # Strip & ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        df.columns = df.columns.str.strip()
        df['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'] = df['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'].astype(str).str.strip()
        df['HN'] = df['HN'].astype(str).str.strip()
        df['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'] = df['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'].astype(str).str.strip()
        df['Year'] = df['Year'].astype(int)

        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢ / ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà - ‡∏´‡∏£‡∏∑‡∏≠ None
        df.replace(["-", "None", None], pd.NA, inplace=True)

        return df
    except Exception as e:
        st.error(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        st.stop()

df = load_sqlite_data()

# ==================== UI SEARCH FORM ====================
st.markdown("<h1 style='text-align:center;'>‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</h1>", unsafe_allow_html=True)
st.markdown("<h4 style='text-align:center; color:gray;'>- ‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏ß‡πÄ‡∏ß‡∏ä‡∏Å‡∏£‡∏£‡∏° ‡∏£‡∏û.‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ -</h4>", unsafe_allow_html=True)

with st.form("search_form"):
    col1, col2, col3 = st.columns(3)
    id_card = col1.text_input("‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô")
    hn = col2.text_input("HN")
    full_name = col3.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•")
    submitted = st.form_submit_button("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")

if submitted:
    query = df.copy()

    if id_card.strip():
        query = query[query["‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"] == id_card.strip()]
    if hn.strip():
        try:
            hn_val = float(hn.strip())
            query = query[query["HN"].astype(float).apply(lambda x: np.isclose(x, hn_val))]
        except ValueError:
            st.error("‚ùå HN ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç ‡πÄ‡∏ä‡πà‡∏ô 12345 ‡∏´‡∏£‡∏∑‡∏≠ 100.0")
            st.stop()
    if full_name.strip():
        query = query[query["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"].str.strip() == full_name.strip()]

    if query.empty:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        st.session_state.pop("search_result", None)
    else:
        st.session_state["search_result"] = query

# ==================== SELECT YEAR FROM RESULTS ====================
if "search_result" in st.session_state:
    results_df = st.session_state["search_result"]

    available_years = sorted(results_df["Year"].dropna().unique().astype(int), reverse=True)
    selected_year = st.selectbox(
        "üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô", 
        options=available_years,
        format_func=lambda y: f"‡∏û.‡∏®. {y}"
    )

    # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡πÄ‡∏•‡∏∑‡∏≠‡∏Å
    person_year_df = results_df[results_df["Year"] == selected_year]

    # ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏°‡∏≤‡∏Å‡∏Å‡∏ß‡πà‡∏≤ 1 ‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à‡πÉ‡∏ô‡∏õ‡∏µ‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ô ‚Üí ‡πÅ‡∏™‡∏î‡∏á‡∏õ‡∏∏‡πà‡∏°‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
    exam_dates = person_year_df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à"].dropna().unique()
    if len(person_year_df) > 1:
        date_buttons = []
        for idx, row in person_year_df.iterrows():
            label = row["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à"] if pd.notna(row["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à"]) else f"‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {idx+1}"
            if st.button(label, key=f"checkup_{idx}"):
                st.session_state["person_row"] = row.to_dict()
    else:
        st.session_state["person_row"] = person_year_df.iloc[0].to_dict()

if "person_row" in st.session_state:
    person = st.session_state["person_row"]
    year_display = person.get("Year", "-")

    def interpret_bp(sbp, dbp):
        try:
            sbp = float(sbp)
            dbp = float(dbp)
            if sbp == 0 or dbp == 0:
                return "-"
            if sbp >= 160 or dbp >= 100:
                return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á"
            elif sbp >= 140 or dbp >= 90:
                return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
            elif sbp < 120 and dbp < 80:
                return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥"
            else:
                return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á"
        except:
            return "-"

    def combined_health_advice(bmi, sbp, dbp):
        try:
            bmi = float(bmi)
        except:
            bmi = None
        try:
            sbp = float(sbp)
            dbp = float(dbp)
        except:
            sbp = dbp = None

        if bmi is None:
            bmi_text = ""
        elif bmi > 30:
            bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏°‡∏≤‡∏Å"
        elif bmi >= 25:
            bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"
        elif bmi < 18.5:
            bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"
        else:
            bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥"

        if sbp is None or dbp is None:
            bp_text = ""
        elif sbp >= 160 or dbp >= 100:
            bp_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å"
        elif sbp >= 140 or dbp >= 90:
            bp_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á"
        elif sbp >= 120 or dbp >= 80:
            bp_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏π‡∏á"
        else:
            bp_text = ""

        if not bmi_text and not bp_text:
            return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û"
        if "‡∏õ‡∏Å‡∏ï‡∏¥" in bmi_text and not bp_text:
            return "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏î‡∏µ ‡∏Ñ‡∏ß‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡∏ï‡πà‡∏≠‡πÑ‡∏õ"
        if not bmi_text and bp_text:
            return f"{bp_text} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠"
        if bmi_text and bp_text:
            return f"{bmi_text} ‡πÅ‡∏•‡∏∞ {bp_text} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢"
        return f"{bmi_text} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"

    # ===== ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å =====
    sbp = person.get("SBP", "")
    dbp = person.get("DBP", "")
    pulse = person.get("pulse", "-")
    weight = person.get("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å", "-")
    height = person.get("‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á", "-")
    waist = person.get("‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß", "-")
    check_date = person.get("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à", "-")

    try:
        weight_val = float(str(weight).replace("‡∏Å‡∏Å.", "").strip())
        height_val = float(str(height).replace("‡∏ã‡∏°.", "").strip())
        bmi_val = weight_val / ((height_val / 100) ** 2)
    except:
        bmi_val = None

    sbp_val = f"{sbp}/{dbp} ‡∏°.‡∏°.‡∏õ‡∏£‡∏≠‡∏ó" if sbp and dbp else "-"
    bp_desc = interpret_bp(sbp, dbp)
    bp_full = f"{sbp_val} - {bp_desc}" if bp_desc != "-" else sbp_val

    pulse = f"{pulse} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ" if pulse not in ["-", None, "nan"] else "-"
    weight = f"{weight} ‡∏Å‡∏Å." if weight not in ["-", None, "nan"] else "-"
    height = f"{height} ‡∏ã‡∏°." if height not in ["-", None, "nan"] else "-"
    waist = f"{waist} ‡∏ã‡∏°." if waist not in ["-", None, "nan"] else "-"

    summary_advice = html.escape(combined_health_advice(bmi_val, sbp, dbp))

    # ===== ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• =====
    st.markdown(f"""
    <div style="font-size: 18px; line-height: 1.8; color: inherit; padding: 24px 8px;">
        <div style="text-align: center; font-size: 22px; font-weight: bold;">‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</div>
        <div style="text-align: center;">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à: {check_date or "-"}</div>
        <div style="text-align: center; margin-top: 10px;">
            ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ 201 ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 11 ‡∏ñ‡∏ô‡∏ô ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà - ‡∏û‡∏£‡πâ‡∏≤‡∏ß<br>
            ‡∏ï‡∏≥‡∏ö‡∏•‡∏´‡∏ô‡∏≠‡∏á‡∏´‡∏≤‡∏£ ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà 50290 ‡πÇ‡∏ó‡∏£ 053 921 199 ‡∏ï‡πà‡∏≠ 167
        </div>
        <hr style="margin: 24px 0;">
        <div style="display: flex; flex-wrap: wrap; justify-content: center; gap: 32px; margin-bottom: 20px; text-align: center;">
            <div><b>‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•:</b> {person.get('‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•', '-')}</div>
            <div><b>‡∏≠‡∏≤‡∏¢‡∏∏:</b> {person.get('‡∏≠‡∏≤‡∏¢‡∏∏', '-')} ‡∏õ‡∏µ</div>
            <div><b>‡πÄ‡∏û‡∏®:</b> {person.get('‡πÄ‡∏û‡∏®', '-')}</div>
            <div><b>HN:</b> {person.get('HN', '-')}</div>
            <div><b>‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô:</b> {person.get('‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô', '-')}</div>
        </div>
        <div style="display: flex; flex-wrap: wrap; justify-content: center; gap: 32px; margin-bottom: 16px; text-align: center;">
            <div><b>‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å:</b> {weight}</div>
            <div><b>‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á:</b> {height}</div>
            <div><b>‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß:</b> {waist}</div>
            <div><b>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï:</b> {bp_full}</div>
            <div><b>‡∏ä‡∏µ‡∏û‡∏à‡∏£:</b> {pulse}</div>
        </div>
        <div style="margin-top: 16px; text-align: center;">
            <b>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</b> {summary_advice}
        </div>
    </div>
    """, unsafe_allow_html=True)

# ==================== ‡πÄ‡∏ï‡∏£‡∏µ‡∏¢‡∏°‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏à‡∏≤‡∏Å SQLite ====================

if "person_row" in st.session_state:
    person = st.session_state["person_row"]
    sex = str(person.get("‡πÄ‡∏û‡∏®", "")).strip()

    def get_float(col):
        try:
            val = person.get(col, "")
            if val in [None, "-", ""]:
                return None
            return float(str(val).replace(",", "").strip())
        except:
            return None

    def flag(val, low=None, high=None, higher_is_better=False):
        if val is None:
            return "-", False
        if higher_is_better:
            return f"{val:.1f}", val < low
        if (low is not None and val < low) or (high is not None and val > high):
            return f"{val:.1f}", True
        return f"{val:.1f}", False

# ==================== ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏ï‡∏£‡∏ß‡∏à CBC ====================
# ‡∏Ñ‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏ï‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏®
hb_low = 12 if sex == "‡∏´‡∏ç‡∏¥‡∏á" else 13
hct_low = 36 if sex == "‡∏´‡∏ç‡∏¥‡∏á" else 39

cbc_config = [
    ("‡∏Æ‡∏µ‡πÇ‡∏°‡πÇ‡∏Å‡∏•‡∏ö‡∏¥‡∏ô (Hb)", "Hb(%)", "‡∏ä‡∏≤‡∏¢ > 13, ‡∏´‡∏ç‡∏¥‡∏á > 12 g/dl", hb_low, None),
    ("‡∏Æ‡∏µ‡∏°‡∏≤‡πÇ‡∏ó‡∏Ñ‡∏£‡∏¥‡∏ï (Hct)", "HCT", "‡∏ä‡∏≤‡∏¢ > 39%, ‡∏´‡∏ç‡∏¥‡∏á > 36%", hct_low, None),
    ("‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß (WBC)", "WBC (cumm)", "4,000 - 10,000 /cu.mm", 4000, 10000),
    ("‡πÄ‡∏Å‡∏•‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î (Platelet)", "Plt (/mm)", "150,000 - 500,000 /cu.mm", 150000, 500000),
]

cbc_rows = []
for label, col, norm, low, high in cbc_config:
    val = get_float(col)
    result, is_abn = flag(val, low, high)
    cbc_rows.append([(label, is_abn), (result, is_abn), (norm, is_abn)])

# ==================== ‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏Ñ‡∏°‡∏µ‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ó‡∏±‡πà‡∏ß‡πÑ‡∏õ (Blood Chemistry) ====================
blood_config = [
    ("FBS", "FBS", "74 - 106 mg/dl", 74, 106),
    ("Uric Acid", "Uric Acid", "2.6 - 7.2 mg%", 2.6, 7.2),
    ("ALK", "ALP", "30 - 120 U/L", 30, 120),
    ("SGOT", "SGOT", "< 37 U/L", None, 37),
    ("SGPT", "SGPT", "< 41 U/L", None, 41),
    ("CHOL", "CHOL", "150 - 200 mg/dl", 150, 200),
    ("TGL", "TGL", "35 - 150 mg/dl", 35, 150),
    ("HDL", "HDL", "> 40 mg/dl", 40, None, True),
    ("LDL", "LDL", "0 - 160 mg/dl", 0, 160),
    ("BUN", "BUN", "7.9 - 20 mg/dl", 7.9, 20),
    ("Cr", "Cr", "0.5 - 1.17 mg/dl", 0.5, 1.17),
    ("GFR", "GFR", "> 60 mL/min", 60, None, True),
]

blood_rows = []
for label, col, norm, low, high, *opt in blood_config:
    higher = opt[0] if opt else False
    val = get_float(col)
    result, is_abn = flag(val, low, high, higher)
    blood_rows.append([(label, is_abn), (result, is_abn), (norm, is_abn)])

# ==================== ‡∏ï‡∏≤‡∏£‡∏≤‡∏á Styled Result Table ====================
def styled_result_table(headers, rows):
    header_html = "".join([f"<th>{h}</th>" for h in headers])
    html_out = f"""
    <style>
        .styled-wrapper {{
            max-width: 820px; margin: 0 auto;
        }}
        .styled-result {{
            width: 100%; border-collapse: collapse;
        }}
        .styled-result th {{
            background-color: #111; color: white;
            padding: 6px 12px; text-align: center;
        }}
        .styled-result td {{
            padding: 6px 12px; vertical-align: middle;
        }}
        .styled-result td:nth-child(2) {{
            text-align: center;
        }}
        .abn {{
            background-color: rgba(255, 0, 0, 0.15);
        }}
    </style>
    <div class="styled-wrapper">
        <table class='styled-result'>
            <thead><tr>{header_html}</tr></thead>
            <tbody>
    """
    for row in rows:
        row_html = ""
        for cell, is_abn in row:
            css = " class='abn'" if is_abn else ""
            row_html += f"<td{css}>{cell}</td>"
        html_out += f"<tr>{row_html}</tr>"
    html_out += "</tbody></table></div>"
    return html_out

# ==================== ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏ö‡∏ô‡∏´‡∏ô‡πâ‡∏≤ Streamlit ====================
left_spacer, col1, col2, right_spacer = st.columns([1, 3, 3, 1])

with col1:
    st.markdown("<h4>‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à CBC</h4>", unsafe_allow_html=True)
    st.markdown(styled_result_table(["‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à", "‡∏ú‡∏•", "‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥"], cbc_rows), unsafe_allow_html=True)

with col2:
    st.markdown("<h4>‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏Ñ‡∏°‡∏µ‡πÄ‡∏•‡∏∑‡∏≠‡∏î</h4>", unsafe_allow_html=True)
    st.markdown(styled_result_table(["‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à", "‡∏ú‡∏•", "‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥"], blood_rows), unsafe_allow_html=True)

# ==================== ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå GFR ‚Üí ‡πÑ‡∏ï ====================
def kidney_summary_gfr_only(gfr_raw):
    try:
        gfr = float(str(gfr_raw).replace(",", "").strip())
        if gfr == 0:
            return ""
        elif gfr < 60:
            return "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ï‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
        else:
            return "‡∏õ‡∏Å‡∏ï‡∏¥"
    except:
        return ""

def kidney_advice_from_summary(summary_text):
    if summary_text == "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ï‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢":
        return (
            "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ï‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ "
            "‡∏•‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏Ñ‡πá‡∏° ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏™‡∏π‡∏á‡∏¢‡πà‡∏≠‡∏¢‡∏¢‡∏≤‡∏Å ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥ 8-10 ‡πÅ‡∏Å‡πâ‡∏ß‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô "
            "‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏Å‡∏•‡∏±‡πâ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞ ‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ö‡∏ß‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå"
        )
    return ""

# ==================== ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå FBS ‚Üí ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• ====================
def fbs_advice(fbs_raw):
    try:
        value = float(str(fbs_raw).replace(",", "").strip())
        if value == 0:
            return ""
        elif 100 <= value < 106:
            return "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏ß‡∏≤‡∏ô ‡πÅ‡∏õ‡πâ‡∏á ‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢"
        elif 106 <= value < 126:
            return "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏ß‡∏≤‡∏ô ‡πÅ‡∏õ‡πâ‡∏á ‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô ‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ã‡πâ‡∏≥ ‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠"
        elif value >= 126:
            return "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏™‡∏π‡∏á ‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏Å‡∏≤‡∏£"
        else:
            return ""
    except:
        return ""

# ==================== ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Liver Function (ALP, SGOT, SGPT) ====================
def summarize_liver(alp_val, sgot_val, sgpt_val):
    try:
        alp = float(alp_val)
        sgot = float(sgot_val)
        sgpt = float(sgpt_val)
        if alp == 0 or sgot == 0 or sgpt == 0:
            return "-"
        if alp > 120 or sgot > 36 or sgpt > 40:
            return "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
        return "‡∏õ‡∏Å‡∏ï‡∏¥"
    except:
        return "-"

def liver_advice(summary_text):
    if summary_text == "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢":
        return "‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ö‡∏ã‡πâ‡∏≥"
    elif summary_text == "‡∏õ‡∏Å‡∏ï‡∏¥":
        return ""
    return "-"

# ==================== ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå Uric Acid ====================
def uric_acid_advice(value_raw):
    try:
        value = float(value_raw)
        if value > 7.2:
            return "‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏ß‡∏£‡∏µ‡∏ô‡∏™‡∏π‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏• ‡πÅ‡∏•‡∏∞‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏ß‡∏î‡∏Ç‡πâ‡∏≠"
        return ""
    except:
        return "-"

# ==================== ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î (CHOL, TGL, LDL) ====================
def summarize_lipids(chol_raw, tgl_raw, ldl_raw):
    try:
        chol = float(str(chol_raw).replace(",", "").strip())
        tgl = float(str(tgl_raw).replace(",", "").strip())
        ldl = float(str(ldl_raw).replace(",", "").strip())
        if chol == 0 and tgl == 0:
            return ""
        if chol >= 250 or tgl >= 250 or ldl >= 180:
            return "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á"
        elif chol <= 200 and tgl <= 150:
            return "‡∏õ‡∏Å‡∏ï‡∏¥"
        else:
            return "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
    except:
        return ""

def lipids_advice(summary_text):
    if summary_text == "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á":
        return (
            "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á ‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏≠‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡∏≠‡∏á‡∏ó‡∏≠‡∏î ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå "
            "‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠ ‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°"
        )
    elif summary_text == "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢":
        return (
            "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ ‡∏•‡∏î‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô "
            "‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÑ‡∏Ç‡∏°‡∏±‡∏ô"
        )
    return ""

# ==================== ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏´‡∏°‡∏ß‡∏î CBC ====================
def cbc_advice(hb, hct, wbc, plt, sex="‡∏ä‡∏≤‡∏¢"):
    advice_parts = []

    try:
        hb_val = float(hb)
        hb_ref = 13 if sex == "‡∏ä‡∏≤‡∏¢" else 12
        if hb_val < hb_ref:
            advice_parts.append("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Æ‡∏µ‡πÇ‡∏°‡πÇ‡∏Å‡∏•‡∏ö‡∏¥‡∏ô‡∏ï‡πà‡∏≥ ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏†‡∏≤‡∏ß‡∏∞‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏à‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ã‡πâ‡∏≥")

    except: pass

    try:
        hct_val = float(hct)
        hct_ref = 39 if sex == "‡∏ä‡∏≤‡∏¢" else 36
        if hct_val < hct_ref:
            advice_parts.append("‡∏Ñ‡πà‡∏≤‡∏Æ‡∏µ‡∏°‡∏≤‡πÇ‡∏ï‡∏Ñ‡∏£‡∏¥‡∏ï‡∏ï‡πà‡∏≥ ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏†‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏à‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°")

    except: pass

    try:
        wbc_val = float(wbc)
        if wbc_val < 4000:
            advice_parts.append("‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß‡∏ï‡πà‡∏≥ ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏Ñ‡∏∏‡πâ‡∏°‡∏Å‡∏±‡∏ô‡∏•‡∏î ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°")
        elif wbc_val > 10000:
            advice_parts.append("‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß‡∏™‡∏π‡∏á ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö ‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå")

    except: pass

    try:
        plt_val = float(plt)
        if plt_val < 150000:
            advice_parts.append("‡πÄ‡∏Å‡∏•‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ï‡πà‡∏≥ ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏†‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏≠‡∏≠‡∏Å‡∏á‡πà‡∏≤‡∏¢ ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ã‡πâ‡∏≥")
        elif plt_val > 500000:
            advice_parts.append("‡πÄ‡∏Å‡∏•‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á ‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")

    except: pass

    return " ".join(advice_parts)

# ==================== ‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ====================
sex = str(person.get("‡πÄ‡∏û‡∏®", "")).strip()  # ‚úÖ ‡∏õ‡∏£‡∏∞‡∏Å‡∏≤‡∏® sex ‡πÉ‡∏´‡πâ‡πÉ‡∏ä‡πâ‡πÑ‡∏î‡πâ‡πÉ‡∏ô logic CBC
advice_list = []

# üîç ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡∏î‡∏¥‡∏ö
gfr_raw = person.get("GFR", "")
fbs_raw = person.get("FBS", "")
alp_raw = person.get("ALP", "")
sgot_raw = person.get("SGOT", "")
sgpt_raw = person.get("SGPT", "")
uric_raw = person.get("Uric Acid", "")
chol_raw = person.get("CHOL", "")
tgl_raw = person.get("TGL", "")
ldl_raw = person.get("LDL", "")

# üìã ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
kidney_summary = kidney_summary_gfr_only(gfr_raw)
advice_list.append(kidney_advice_from_summary(kidney_summary))

advice_list.append(fbs_advice(fbs_raw))
advice_list.append(liver_advice(summarize_liver(alp_raw, sgot_raw, sgpt_raw)))
advice_list.append(uric_acid_advice(uric_raw))
advice_list.append(lipids_advice(summarize_lipids(chol_raw, tgl_raw, ldl_raw)))
advice_list.append(cbc_advice(
    person.get("Hb(%)", ""), 
    person.get("HCT", ""), 
    person.get("WBC (cumm)", ""), 
    person.get("Plt (/mm)", ""),
    sex=sex
))

# ==================== ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ====================
from collections import OrderedDict

def merge_final_advice_grouped(messages):
    groups = {
        "FBS": [], "‡πÑ‡∏ï": [], "‡∏ï‡∏±‡∏ö": [], "‡∏¢‡∏π‡∏£‡∏¥‡∏Ñ": [], "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô": [], "‡∏≠‡∏∑‡πà‡∏ô‡πÜ": []
    }

    for msg in messages:
        if not msg or msg == "-" or msg.strip() == "":
            continue
        if "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•" in msg:
            groups["FBS"].append(msg)
        elif "‡πÑ‡∏ï" in msg:
            groups["‡πÑ‡∏ï"].append(msg)
        elif "‡∏ï‡∏±‡∏ö" in msg:
            groups["‡∏ï‡∏±‡∏ö"].append(msg)
        elif "‡∏û‡∏¥‡∏ß‡∏£‡∏µ‡∏ô" in msg or "‡∏¢‡∏π‡∏£‡∏¥‡∏Ñ" in msg:
            groups["‡∏¢‡∏π‡∏£‡∏¥‡∏Ñ"].append(msg)
        elif "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô" in msg:
            groups["‡πÑ‡∏Ç‡∏°‡∏±‡∏ô"].append(msg)
        else:
            groups["‡∏≠‡∏∑‡πà‡∏ô‡πÜ"].append(msg)

    section_texts = []
    icon_map = {
        "FBS": "üç¨", "‡πÑ‡∏ï": "üíß", "‡∏ï‡∏±‡∏ö": "ü´Ä",
        "‡∏¢‡∏π‡∏£‡∏¥‡∏Ñ": "ü¶¥", "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô": "üßà", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ": "üìù"
    }
    for title, msgs in groups.items():
        if msgs:
            unique_msgs = list(OrderedDict.fromkeys(msgs))
            section_texts.append(f"<b>{icon_map.get(title)} {title}:</b> {' '.join(unique_msgs)}")

    if not section_texts:
        return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à"

    return "<div style='margin-bottom: 0.75rem;'>" + "</div><div style='margin-bottom: 0.75rem;'>".join(section_texts) + "</div>"

# ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•
st.markdown(f"""
<div style="
    background-color: rgba(33, 150, 243, 0.15);
    padding: 2rem 2.5rem;
    border-radius: 10px;
    font-size: 16px;
    line-height: 1.5;
    color: inherit;
">
    <div style="font-size: 18px; font-weight: bold; margin-bottom: 1.5rem;">
        üìã ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
    </div>
    {merge_final_advice_grouped(advice_list)}
</div>
""", unsafe_allow_html=True)
