import streamlit as st
import sqlite3
import requests
import pandas as pd
import io
import tempfile
import html  # ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö html.escape()
import numpy as np
from collections import OrderedDict

def is_empty(val):
    return str(val).strip().lower() in ["", "-", "none", "nan", "null"]

@st.cache_data(ttl=600)
def load_sqlite_data():
    try:
        file_id = "1HruO9AMrUfniC8hBWtumVdxLJayEc1Xr"
        download_url = f"https://drive.google.com/uc?export=download&id={file_id}"
        response = requests.get(download_url)
        response.raise_for_status()

        # ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏•‡∏á temp file ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÉ‡∏´‡πâ sqlite3 ‡∏≠‡πà‡∏≤‡∏ô‡πÑ‡∏î‡πâ
        tmp = tempfile.NamedTemporaryFile(delete=False, suffix=".db")
        tmp.write(response.content)
        tmp.flush()
        tmp.close()

        conn = sqlite3.connect(tmp.name)
        df = pd.read_sql("SELECT * FROM health_data", conn)
        conn.close()

        # Strip & ‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏ô‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç
        df.columns = df.columns.str.strip()
        df['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'] = df['‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô'].astype(str).str.strip()
        df['HN'] = df['HN'].apply(lambda x: str(int(float(x))) if pd.notna(x) else "").str.strip()
        df['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'] = df['‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•'].astype(str).str.strip()
        df['Year'] = df['Year'].astype(int)

        # ‡∏õ‡∏£‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ó‡∏µ‡πà‡∏´‡∏≤‡∏¢ / ‡πÅ‡∏ó‡∏ô‡∏ó‡∏µ‡πà - ‡∏´‡∏£‡∏∑‡∏≠ None
        df.replace(["-", "None", None], pd.NA, inplace=True)

        return df
    except Exception as e:
        st.error(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î‡∏ê‡∏≤‡∏ô‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
        st.stop()

df = load_sqlite_data()

def get_float(col, person_data):
    try:
        val = person_data.get(col, "")
        if is_empty(val):
            return None
        return float(str(val).replace(",", "").strip())
    except:
        return None

def flag(val, low=None, high=None, higher_is_better=False):
    try:
        val = float(str(val).replace(",", "").strip())
    except:
        return "-", False

    if higher_is_better and low is not None:
        return f"{val:.1f}", val < low

    if low is not None and val < low:
        return f"{val:.1f}", True
    if high is not None and val > high:
        return f"{val:.1f}", True

    return f"{val:.1f}", False

# ==================== UI SEARCH FORM ====================
st.set_page_config(page_title="‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û", layout="wide")
st.markdown("""
    <style>
    /* ‡∏õ‡∏¥‡∏î scrollbar ‡πÄ‡∏â‡∏û‡∏≤‡∏∞ markdown ‡∏ó‡∏∏‡∏Å‡∏ï‡∏±‡∏ß */
    div.stMarkdown {
        overflow: visible !important;
    }

    /* ‡∏õ‡∏¥‡∏î scrollbar ‡∏ö‡∏ô container ‡∏ó‡∏µ‡πà Streamlit ‡∏´‡πà‡∏≠‡πÉ‡∏´‡πâ */
    section.main > div {
        overflow-y: visible !important;
    }

    /* ‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡πÑ‡∏°‡πà‡πÉ‡∏´‡πâ wrap scroll container */
    [data-testid="stVerticalBlock"] {
        overflow: visible !important;
    }

    /* ‡∏õ‡∏¥‡∏î scrollbar ‡∏ó‡∏µ‡πà WebKit (Chrome/Safari) */
    ::-webkit-scrollbar {
        width: 0px;
        background: transparent;
    }

    /* ‡∏õ‡∏¥‡∏î scrollbar ‡∏Ç‡∏≠‡∏á container markdown ‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ */
    div[style*="overflow: auto"] {
        overflow: visible !important;
    }

    div[style*="overflow-x: auto"] {
        overflow-x: visible !important;
    }

    div[style*="overflow-y: auto"] {
        overflow-y: visible !important;
    }
    </style>
""", unsafe_allow_html=True)

st.markdown("<h1 style='text-align:center;'>‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</h1>", unsafe_allow_html=True)
st.markdown("<h4 style='text-align:center; color:gray;'>- ‡∏Ñ‡∏•‡∏¥‡∏ô‡∏¥‡∏Å‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏ß‡πÄ‡∏ß‡∏ä‡∏Å‡∏£‡∏£‡∏° ‡∏£‡∏û.‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ -</h4>", unsafe_allow_html=True)

with st.form("search_form"):
    col1, col2, col3 = st.columns(3)
    id_card = col1.text_input("‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô")
    hn = col2.text_input("HN")
    full_name = col3.text_input("‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•")
    submitted = st.form_submit_button("‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤")

if submitted:
    query = df.copy()

    if id_card.strip():
        query = query[query["‡πÄ‡∏•‡∏Ç‡∏ö‡∏±‡∏ï‡∏£‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏ä‡∏ô"] == id_card.strip()]
    if hn.strip():
        hn_cleaned = str(int(hn.strip()))
        query = query[query["HN"] == hn_cleaned]
    if full_name.strip():
        query = query[query["‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•"].str.strip() == full_name.strip()]

    # üßπ Reset ‡∏õ‡∏∏‡πà‡∏°‡∏ó‡∏µ‡πà‡πÄ‡∏Ñ‡∏¢‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ß‡πâ‡∏Å‡πà‡∏≠‡∏ô‡∏´‡∏ô‡πâ‡∏≤‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡πÉ‡∏´‡∏°‡πà
    st.session_state.pop("selected_index", None)
    
    if query.empty:
        st.error("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏≠‡∏µ‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á")
        st.session_state.pop("search_result", None)
    else:
        st.session_state["search_result"] = query

# ==================== SELECT YEAR FROM RESULTS ====================
if "search_result" in st.session_state:
    results_df = st.session_state["search_result"]

    available_years = sorted(results_df["Year"].dropna().unique().astype(int), reverse=True)
    selected_year = st.selectbox(
        "üìÖ ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏µ‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏î‡∏π‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô",
        options=available_years,
        format_func=lambda y: f"‡∏û.‡∏®. {y}"
    )

    selected_hn = results_df.iloc[0]["HN"]  # ‡∏î‡∏∂‡∏á HN ‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏ô‡∏ó‡∏µ‡πà‡∏Ñ‡πâ‡∏ô‡πÄ‡∏à‡∏≠

    person_year_df = results_df[
        (results_df["Year"] == selected_year) &
        (results_df["HN"] == selected_hn)
    ]

    person_year_df = person_year_df.drop_duplicates(subset=["HN", "‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à"])

    exam_dates = person_year_df["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à"].dropna().unique()
    
    if len(exam_dates) > 1:
        for idx, row in person_year_df.iterrows():
            label = str(row["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à"]).strip() if pd.notna(row["‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à"]) else f"‡∏Ñ‡∏£‡∏±‡πâ‡∏á‡∏ó‡∏µ‡πà {idx+1}"
            if st.button(label, key=f"checkup_{idx}"):
                st.session_state["person_row"] = row.to_dict()
                st.session_state["selected_row_found"] = True
    elif len(person_year_df) == 1:
        st.session_state["person_row"] = person_year_df.iloc[0].to_dict()
        st.session_state["selected_row_found"] = True

# ========== ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡∏Ñ‡πà‡∏≤‡∏ï‡πà‡∏≤‡∏á ‡πÜ (‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏Å‡πÉ‡∏ä‡πâ) ==========
def kidney_summary_gfr_only(gfr_raw):
    try:
        gfr = float(str(gfr_raw).replace(",", "").strip())
        if gfr == 0:
            return ""
        elif gfr < 60:
            return "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ï‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
        else:
            return "‡∏õ‡∏Å‡∏ï‡∏¥"
    except:
        return ""

def kidney_advice_from_summary(summary_text):
    if summary_text == "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ï‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢":
        return (
            "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ï‡∏ï‡πà‡∏≥‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ "
            "‡∏•‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÄ‡∏Ñ‡πá‡∏° ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡∏™‡∏π‡∏á‡∏¢‡πà‡∏≠‡∏¢‡∏¢‡∏≤‡∏Å ‡∏î‡∏∑‡πà‡∏°‡∏ô‡πâ‡∏≥ 8-10 ‡πÅ‡∏Å‡πâ‡∏ß‡∏ï‡πà‡∏≠‡∏ß‡∏±‡∏ô "
            "‡πÅ‡∏•‡∏∞‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡∏Å‡∏•‡∏±‡πâ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞ ‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏ö‡∏ß‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥‡πÉ‡∏´‡πâ‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå"
        )
    return ""

def fbs_advice(fbs_raw):
    if is_empty(fbs_raw):
        return ""
    try:
        value = float(str(fbs_raw).replace(",", "").strip())
        if value == 0:
            return ""
        elif 100 <= value < 106:
            return "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏ß‡∏≤‡∏ô ‡πÅ‡∏õ‡πâ‡∏á ‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢"
        elif 106 <= value < 126:
            return "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏´‡∏ß‡∏≤‡∏ô ‡πÅ‡∏õ‡πâ‡∏á ‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô ‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏ã‡πâ‡∏≥ ‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠"
        elif value >= 126:
            return "‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡∏™‡∏π‡∏á ‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÄ‡∏ö‡∏≤‡∏´‡∏ß‡∏≤‡∏ô ‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏≠‡∏≤‡∏Å‡∏≤‡∏£"
        else:
            return ""
    except:
        return ""

def summarize_liver(alp_val, sgot_val, sgpt_val):
    try:
        alp = float(alp_val)
        sgot = float(sgot_val)
        sgpt = float(sgpt_val)
        if alp == 0 or sgot == 0 or sgpt == 0:
            return "-"
        if alp > 120 or sgot > 36 or sgpt > 40:
            return "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
        return "‡∏õ‡∏Å‡∏ï‡∏¥"
    except:
        return "-"

def liver_advice(summary_text):
    if summary_text == "‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏Å‡∏ß‡πà‡∏≤‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢":
        return "‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏™‡∏π‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ö‡∏ã‡πâ‡∏≥"
    elif summary_text == "‡∏õ‡∏Å‡∏ï‡∏¥":
        return ""
    return "-"

def uric_acid_advice(value_raw):
    try:
        value = float(value_raw)
        if value > 7.2:
            return "‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡∏û‡∏¥‡∏ß‡∏£‡∏µ‡∏ô‡∏™‡∏π‡∏á ‡πÄ‡∏ä‡πà‡∏ô ‡πÄ‡∏Ñ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÉ‡∏ô‡∏™‡∏±‡∏ï‡∏ß‡πå ‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏∞‡πÄ‡∏• ‡πÅ‡∏•‡∏∞‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡∏´‡∏≤‡∏Å‡∏°‡∏µ‡∏≠‡∏≤‡∏Å‡∏≤‡∏£‡∏õ‡∏ß‡∏î‡∏Ç‡πâ‡∏≠"
        return ""
    except:
        return "-"

def summarize_lipids(chol_raw, tgl_raw, ldl_raw):
    try:
        chol = float(str(chol_raw).replace(",", "").strip())
        tgl = float(str(tgl_raw).replace(",", "").strip())
        ldl = float(str(ldl_raw).replace(",", "").strip())
        if chol == 0 and tgl == 0:
            return ""
        if chol >= 250 or tgl >= 250 or ldl >= 180:
            return "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á"
        elif chol <= 200 and tgl <= 150:
            return "‡∏õ‡∏Å‡∏ï‡∏¥"
        else:
            return "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
    except:
        return ""

def lipids_advice(summary_text):
    if summary_text == "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á":
        return (
            "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á ‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡∏ó‡∏µ‡πà‡∏°‡∏µ‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏≠‡∏¥‡πà‡∏°‡∏ï‡∏±‡∏ß ‡πÄ‡∏ä‡πà‡∏ô ‡∏Ç‡∏≠‡∏á‡∏ó‡∏≠‡∏î ‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏±‡∏ï‡∏ß‡πå "
            "‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠ ‡πÅ‡∏•‡∏∞‡∏û‡∏¥‡∏à‡∏≤‡∏£‡∏ì‡∏≤‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°"
        )
    elif summary_text == "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢":
        return (
            "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢ ‡∏Ñ‡∏ß‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ ‡∏•‡∏î‡∏Ç‡∏≠‡∏á‡∏°‡∏±‡∏ô "
            "‡πÅ‡∏•‡∏∞‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡∏£‡∏∞‡∏î‡∏±‡∏ö‡πÑ‡∏Ç‡∏°‡∏±‡∏ô"
        )
    return ""

def cbc_advice(hb, hct, wbc, plt, sex="‡∏ä‡∏≤‡∏¢"):
    advice_parts = []

    try:
        hb_val = float(hb)
        hb_ref = 13 if sex == "‡∏ä‡∏≤‡∏¢" else 12
        if hb_val < hb_ref:
            advice_parts.append("‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏Æ‡∏µ‡πÇ‡∏°‡πÇ‡∏Å‡∏•‡∏ö‡∏¥‡∏ô‡∏ï‡πà‡∏≥ ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏†‡∏≤‡∏ß‡∏∞‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏à‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ã‡πâ‡∏≥")
    except:
        pass

    try:
        hct_val = float(hct)
        hct_ref = 39 if sex == "‡∏ä‡∏≤‡∏¢" else 36
        if hct_val < hct_ref:
            advice_parts.append("‡∏Ñ‡πà‡∏≤‡∏Æ‡∏µ‡∏°‡∏≤‡πÇ‡∏ï‡∏Ñ‡∏£‡∏¥‡∏ï‡∏ï‡πà‡∏≥ ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏†‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏à‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°")
    except:
        pass

    try:
        wbc_val = float(wbc)
        if wbc_val < 4000:
            advice_parts.append("‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß‡∏ï‡πà‡∏≥ ‡∏≠‡∏≤‡∏à‡πÄ‡∏Å‡∏¥‡∏î‡∏à‡∏≤‡∏Å‡∏†‡∏π‡∏°‡∏¥‡∏Ñ‡∏∏‡πâ‡∏°‡∏Å‡∏±‡∏ô‡∏•‡∏î ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°")
        elif wbc_val > 10000:
            advice_parts.append("‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß‡∏™‡∏π‡∏á ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö ‡∏ï‡∏¥‡∏î‡πÄ‡∏ä‡∏∑‡πâ‡∏≠ ‡∏´‡∏£‡∏∑‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ú‡∏¥‡∏î‡∏õ‡∏Å‡∏ï‡∏¥ ‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå")
    except:
        pass

    try:
        plt_val = float(plt)
        if plt_val < 150000:
            advice_parts.append("‡πÄ‡∏Å‡∏•‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏ï‡πà‡∏≥ ‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏†‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏≠‡∏≠‡∏Å‡∏á‡πà‡∏≤‡∏¢ ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏ã‡πâ‡∏≥")
        elif plt_val > 500000:
            advice_parts.append("‡πÄ‡∏Å‡∏•‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏™‡∏π‡∏á ‡∏Ñ‡∏ß‡∏£‡∏û‡∏ö‡πÅ‡∏û‡∏ó‡∏¢‡πå‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤‡∏™‡∏≤‡πÄ‡∏´‡∏ï‡∏∏‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°")
    except:
        pass

    return " ".join(advice_parts)

# === ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ ===
def render_section_header(title, subtitle=None):
    if subtitle:
        full_title = f"{title} <span style='font-weight: normal;'>({subtitle})</span>"
    else:
        full_title = title

    return f"""
    <div style='
        background-color: #1b5e20;
        color: white;
        text-align: center;
        padding: 1rem 0.5rem;
        font-size: 20px;
        font-weight: bold;
        font-family: "Segoe UI", sans-serif;
        border-radius: 8px;
        margin-top: 2rem;
        margin-bottom: 1rem;
    '>
        {full_title}
    </div>
    """
if "person_row" in st.session_state:
    person = st.session_state["person_row"]
    year_display = person.get("Year", "-")

    def interpret_bp(sbp, dbp):
        try:
            sbp = float(sbp)
            dbp = float(dbp)
            if sbp == 0 or dbp == 0:
                return "-"
            if sbp >= 160 or dbp >= 100:
                return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á"
            elif sbp >= 140 or dbp >= 90:
                return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏™‡∏π‡∏á‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
            elif sbp < 120 and dbp < 80:
                return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏õ‡∏Å‡∏ï‡∏¥"
            else:
                return "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏Ñ‡πà‡∏≠‡∏ô‡∏Ç‡πâ‡∏≤‡∏á‡∏™‡∏π‡∏á"
        except:
            return "-"

    def combined_health_advice(bmi, sbp, dbp):
        if is_empty(bmi) and is_empty(sbp) and is_empty(dbp):
            return ""
        
        try:
            bmi = float(bmi)
        except:
            bmi = None
        try:
            sbp = float(sbp)
            dbp = float(dbp)
        except:
            sbp = dbp = None
        
        bmi_text = ""
        bp_text = ""
        
        if bmi is not None:
            if bmi > 30:
                bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô‡∏°‡∏≤‡∏Å"
            elif bmi >= 25:
                bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡πÄ‡∏Å‡∏¥‡∏ô‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"
            elif bmi < 18.5:
                bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏ô‡πâ‡∏≠‡∏¢‡∏Å‡∏ß‡πà‡∏≤‡∏°‡∏≤‡∏ï‡∏£‡∏ê‡∏≤‡∏ô"
            else:
                bmi_text = "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏õ‡∏Å‡∏ï‡∏¥"
        
        if sbp is not None and dbp is not None:
            if sbp >= 160 or dbp >= 100:
                bp_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á‡∏°‡∏≤‡∏Å"
            elif sbp >= 140 or dbp >= 90:
                bp_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏™‡∏π‡∏á"
            elif sbp >= 120 or dbp >= 80:
                bp_text = "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏™‡∏π‡∏á"
        
        if bmi is not None and "‡∏õ‡∏Å‡∏ï‡∏¥" in bmi_text and not bp_text:
            return "‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÄ‡∏Å‡∏ì‡∏ë‡πå‡∏î‡∏µ ‡∏Ñ‡∏ß‡∏£‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ‡∏ï‡πà‡∏≠‡πÑ‡∏õ"
        if not bmi_text and bp_text:
            return f"{bp_text} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÅ‡∏•‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û ‡πÅ‡∏•‡∏∞‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏Ñ‡πà‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏™‡∏°‡πà‡∏≥‡πÄ‡∏™‡∏°‡∏≠"
        if bmi_text and bp_text:
            return f"{bmi_text} ‡πÅ‡∏•‡∏∞ {bp_text} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏´‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢"
        return f"{bmi_text} ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏î‡∏π‡πÅ‡∏•‡πÄ‡∏£‡∏∑‡πà‡∏≠‡∏á‡πÇ‡∏†‡∏ä‡∏ô‡∏≤‡∏Å‡∏≤‡∏£‡πÅ‡∏•‡∏∞‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢‡∏≠‡∏¢‡πà‡∏≤‡∏á‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏°"

    # ===== ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏•‡∏±‡∏Å =====
    sbp = person.get("SBP", "")
    dbp = person.get("DBP", "")
    pulse = person.get("pulse", "-")
    weight = person.get("‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å", "-")
    height = person.get("‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á", "-")
    waist = person.get("‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß", "-")
    check_date = person.get("‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à", "-")

    try:
        weight_val = float(str(weight).replace("‡∏Å‡∏Å.", "").strip())
        height_val = float(str(height).replace("‡∏ã‡∏°.", "").strip())
        bmi_val = weight_val / ((height_val / 100) ** 2)
    except:
        bmi_val = None

    # ‡πÅ‡∏õ‡∏•‡∏á‡πÉ‡∏´‡πâ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
    try:
        sbp_int = int(float(sbp))
        dbp_int = int(float(dbp))
        bp_val = f"{sbp_int}/{dbp_int} ‡∏°.‡∏°.‡∏õ‡∏£‡∏≠‡∏ó"
    except:
        sbp_int = dbp_int = None
        bp_val = "-"
    
    if sbp_int is None or dbp_int is None:
        bp_desc = "-"
        bp_full = "-"
    else:
        bp_desc = interpret_bp(sbp, dbp)
        bp_full = f"{bp_val} - {bp_desc}" if bp_desc != "-" else bp_val

    # ‡∏î‡∏∂‡∏á‡∏Ñ‡πà‡∏≤‡πÅ‡∏•‡∏∞‡πÅ‡∏õ‡∏•‡∏á‡∏ä‡∏µ‡∏û‡∏à‡∏£‡πÉ‡∏´‡πâ‡πÄ‡∏õ‡πá‡∏ô‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏ï‡πá‡∏° ‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏ó‡∏®‡∏ô‡∏¥‡∏¢‡∏°
    try:
        pulse_val = int(float(person.get("pulse", 0)))
    except:
        pulse_val = None

    pulse = f"{pulse_val} ‡∏Ñ‡∏£‡∏±‡πâ‡∏á/‡∏ô‡∏≤‡∏ó‡∏µ" if pulse_val is not None else "-"
    weight = f"{weight} ‡∏Å‡∏Å." if not is_empty(weight) else "-"
    height = f"{height} ‡∏ã‡∏°." if not is_empty(height) else "-"
    waist = f"{waist} ‡∏ã‡∏°." if not is_empty(waist) else "-"

    advice_text = combined_health_advice(bmi_val, sbp, dbp)
    summary_advice = html.escape(advice_text) if advice_text else ""
    
    # ===== ‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏• =====
    st.markdown(f"""
    <div style="font-size: 20px; line-height: 1.8; color: inherit; padding: 24px 8px;">
        <div style="text-align: center; font-size: 29px; font-weight: bold;">‡∏£‡∏≤‡∏¢‡∏á‡∏≤‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û</div>
        <div style="text-align: center;">‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà‡∏ï‡∏£‡∏ß‡∏à: {check_date or "-"}</div>
        <div style="text-align: center; margin-top: 10px;">
            ‡πÇ‡∏£‡∏á‡∏û‡∏¢‡∏≤‡∏ö‡∏≤‡∏•‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ 201 ‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà 11 ‡∏ñ‡∏ô‡∏ô ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà - ‡∏û‡∏£‡πâ‡∏≤‡∏ß ‡∏ï‡∏≥‡∏ö‡∏•‡∏´‡∏ô‡∏≠‡∏á‡∏´‡∏≤‡∏£ ‡∏≠‡∏≥‡πÄ‡∏†‡∏≠‡∏™‡∏±‡∏ô‡∏ó‡∏£‡∏≤‡∏¢ ‡πÄ‡∏ä‡∏µ‡∏¢‡∏á‡πÉ‡∏´‡∏°‡πà 50290<br>
            ‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡∏Å‡∏•‡∏∏‡πà‡∏°‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏ß‡πÄ‡∏ß‡∏ä‡∏Å‡∏£‡∏£‡∏° ‡πÇ‡∏ó‡∏£ 053 921 199 ‡∏ï‡πà‡∏≠ 167
        </div>
        <hr style="margin: 24px 0;">
        <div style="display: flex; flex-wrap: wrap; justify-content: center; gap: 32px; margin-bottom: 20px; text-align: center;">
            <div><b>‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•:</b> {person.get('‡∏ä‡∏∑‡πà‡∏≠-‡∏™‡∏Å‡∏∏‡∏•', '-')}</div>
            <div><b>‡∏≠‡∏≤‡∏¢‡∏∏:</b> {str(int(float(person.get('‡∏≠‡∏≤‡∏¢‡∏∏')))) if str(person.get('‡∏≠‡∏≤‡∏¢‡∏∏')).replace('.', '', 1).isdigit() else person.get('‡∏≠‡∏≤‡∏¢‡∏∏', '-')} ‡∏õ‡∏µ</div>
            <div><b>‡πÄ‡∏û‡∏®:</b> {person.get('‡πÄ‡∏û‡∏®', '-')}</div>
            <div><b>HN:</b> {str(int(float(person.get('HN')))) if str(person.get('HN')).replace('.', '', 1).isdigit() else person.get('HN', '-')}</div>
            <div><b>‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô:</b> {person.get('‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏á‡∏≤‡∏ô', '-')}</div>
        </div>
        <div style="display: flex; flex-wrap: wrap; justify-content: center; gap: 32px; margin-bottom: 16px; text-align: center;">
            <div><b>‡∏ô‡πâ‡∏≥‡∏´‡∏ô‡∏±‡∏Å:</b> {weight}</div>
            <div><b>‡∏™‡πà‡∏ß‡∏ô‡∏™‡∏π‡∏á:</b> {height}</div>
            <div><b>‡∏£‡∏≠‡∏ö‡πÄ‡∏≠‡∏ß:</b> {waist}</div>
            <div><b>‡∏Ñ‡∏ß‡∏≤‡∏°‡∏î‡∏±‡∏ô‡πÇ‡∏•‡∏´‡∏¥‡∏ï:</b> {bp_full}</div>
            <div><b>‡∏ä‡∏µ‡∏û‡∏à‡∏£:</b> {pulse}</div>
        </div>
        {f"<div style='margin-top: 16px; text-align: center;'><b>‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥:</b> {summary_advice}</div>" if summary_advice else ""}
    </div>
    """, unsafe_allow_html=True)

if "person_row" in st.session_state:
    person = st.session_state["person_row"]
    sex = str(person.get("‡πÄ‡∏û‡∏®", "")).strip()

    if sex not in ["‡∏ä‡∏≤‡∏¢", "‡∏´‡∏ç‡∏¥‡∏á"]:
        st.warning("‚ö†Ô∏è ‡πÄ‡∏û‡∏®‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏• ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏Ñ‡πà‡∏≤‡∏≠‡πâ‡∏≤‡∏á‡∏≠‡∏¥‡∏á‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô")
        sex = "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏"

    if sex == "‡∏´‡∏ç‡∏¥‡∏á":
        hb_low = 12
        hct_low = 36
    elif sex == "‡∏ä‡∏≤‡∏¢":
        hb_low = 13
        hct_low = 39
    else: # Default for "‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏" or other cases
        hb_low = 12
        hct_low = 36

    cbc_config = [
        ("‡∏Æ‡∏µ‡πÇ‡∏°‡πÇ‡∏Å‡∏•‡∏ö‡∏¥‡∏ô (Hb)", "Hb(%)", "‡∏ä‡∏≤‡∏¢ > 13, ‡∏´‡∏ç‡∏¥‡∏á > 12 g/dl", hb_low, None, False),
        ("‡∏Æ‡∏µ‡∏°‡∏≤‡πÇ‡∏ó‡∏Ñ‡∏£‡∏¥‡∏ï (Hct)", "HCT", "‡∏ä‡∏≤‡∏¢ > 39%, ‡∏´‡∏ç‡∏¥‡∏á > 36%", hct_low, None, False),
        ("‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß (wbc)", "WBC (cumm)", "4,000 - 10,000 /cu.mm", 4000, 10000),
        ("‡∏ô‡∏¥‡∏ß‡πÇ‡∏ó‡∏£‡∏ü‡∏¥‡∏• (Neutrophil)", "Ne (%)", "43 - 70%", 43, 70),
        ("‡∏•‡∏¥‡∏°‡πÇ‡∏ü‡πÑ‡∏ã‡∏ï‡πå (Lymphocyte)", "Ly (%)", "20 - 44%", 20, 44),
        ("‡πÇ‡∏°‡πÇ‡∏ô‡πÑ‡∏ã‡∏ï‡πå (Monocyte)", "M", "3 - 9%", 3, 9),
        ("‡∏≠‡∏µ‡πÇ‡∏≠‡∏ã‡∏¥‡πÇ‡∏ô‡∏ü‡∏¥‡∏• (Eosinophil)", "Eo", "0 - 9%", 0, 9),
        ("‡πÄ‡∏ö‡πÇ‡∏ã‡∏ü‡∏¥‡∏• (Basophil)", "BA", "0 - 3%", 0, 3),
        ("‡πÄ‡∏Å‡∏•‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î (Platelet)", "Plt (/mm)", "150,000 - 500,000 /cu.mm", 150000, 500000),
    ]

    cbc_rows = []
    for label, col, norm, low, high, *opt in cbc_config:
        higher = opt[0] if opt else False
        val = get_float(col, person)
        result, is_abn = flag(val, low, high, higher)
        cbc_rows.append([(label, is_abn), (result, is_abn), (norm, is_abn)])

    blood_config = [
        ("‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î (FBS)", "FBS", "74 - 106 mg/dl", 74, 106),
        ("‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î (Uric Acid)", "Uric Acid", "2.6 - 7.2 mg%", 2.6, 7.2),
        ("‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏ô‡πÑ‡∏ã‡∏°‡πå‡∏ï‡∏±‡∏ö (ALK)", "ALP", "30 - 120 U/L", 30, 120),
        ("‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏ô‡πÑ‡∏ã‡∏°‡πå‡∏ï‡∏±‡∏ö (SGOT)", "SGOT", "< 37 U/L", None, 37),
        ("‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÄ‡∏≠‡∏ô‡πÑ‡∏ã‡∏°‡πå‡∏ï‡∏±‡∏ö (SGPT)", "SGPT", "< 41 U/L", None, 41),
        ("‡∏Ñ‡∏•‡∏≠‡πÄ‡∏£‡∏™‡πÄ‡∏ï‡∏≠‡∏£‡∏≠‡∏• (CHOL)", "CHOL", "150 - 200 mg/dl", 150, 200),
        ("‡πÑ‡∏ï‡∏£‡∏Å‡∏•‡∏µ‡πÄ‡∏ã‡∏≠‡πÑ‡∏£‡∏î‡πå (TGL)", "TGL", "35 - 150 mg/dl", 35, 150),
        ("‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡∏î‡∏µ (HDL)", "HDL", "> 40 mg/dl", 40, None, True),
        ("‡πÑ‡∏Ç‡∏°‡∏±‡∏ô‡πÄ‡∏•‡∏ß (LDL)", "LDL", "0 - 160 mg/dl", 0, 160),
        ("‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ï (BUN)", "BUN", "7.9 - 20 mg/dl", 7.9, 20),
        ("‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡πÑ‡∏ï (Cr)", "Cr", "0.5 - 1.17 mg/dl", 0.5, 1.17),
        ("‡∏õ‡∏£‡∏∞‡∏™‡∏¥‡∏ó‡∏ò‡∏¥‡∏†‡∏≤‡∏û‡∏Å‡∏≤‡∏£‡∏Å‡∏£‡∏≠‡∏á‡∏Ç‡∏≠‡∏á‡πÑ‡∏ï (GFR)", "GFR", "> 60 mL/min", 60, None, True),
    ]

    blood_rows = []
    for label, col, norm, low, high, *opt in blood_config:
        higher = opt[0] if opt else False
        val = get_float(col, person)
        result, is_abn = flag(val, low, high, higher)
        blood_rows.append([(label, is_abn), (result, is_abn), (norm, is_abn)])

    def render_lab_section(title, subtitle, headers, rows):
        style = """
        <style>
            .lab-container {
                background-color: var(--background-color);  /* ‡πÉ‡∏ä‡πâ‡∏™‡∏µ‡∏à‡∏≤‡∏Å‡∏ò‡∏µ‡∏° */
                margin-top: 1rem;
            }
            .lab-table {
                width: 100%;
                border-collapse: collapse;
                font-size: 16px;
                font-family: "Segoe UI", sans-serif;
                color: var(--text-color);  /* ‡πÅ‡∏ó‡∏ô white */
            }
            .lab-table thead th {
                background-color: var(--secondary-background-color);
                color: var(--text-color);
                padding: 2px 4px;
                text-align: center;
                font-weight: bold;
                border: 1px solid transparent;
            }
            .lab-table td {
                padding: 2px 1px;
                border: 1px solid transparent;
                text-align: center;
            }
            .lab-abn {
                background-color: rgba(255, 64, 64, 0.25); /* ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÅ‡∏™‡∏á */
            }
            .lab-row {
                background-color: rgba(255,255,255,0.02);
            }
        </style>
        """
        html = f"""
        <div style='
            background-color: #1b5e20;
            color: white;
            text-align: center;
            padding: 1rem 0.5rem;
            font-size: 20px;
            font-weight: bold;
            font-family: "Segoe UI", sans-serif;
            border-radius: 8px;
            margin-bottom: 1rem;
        '>
            {title}<br><span style='font-size: 18px; font-weight: normal;'>({subtitle})</span>
        </div>
        """
        
        html += "<div class='lab-container'><table class='lab-table'>"
        html += "<thead><tr>"
        for i, h in enumerate(headers):
            align = "left" if i in [0, 2] else "center"
            html += f"<th style='text-align: {align};'>{h}</th>"
        html += "</tr></thead><tbody>"
        
        for row in rows:
            # Check if any item in the row is abnormal (assuming it's at index 1 of the tuple)
            is_abn = any(item[1] for item in row if isinstance(item, tuple) and len(item) > 1)
            row_class = "lab-abn" if is_abn else "lab-row"
            
            html += f"<tr>"
            html += f"<td class='{row_class}' style='text-align: left;'>{row[0][0]}</td>"  # ‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à
            html += f"<td class='{row_class}'>{row[1][0]}</td>"  # ‡∏ú‡∏•
            html += f"<td class='{row_class}' style='text-align: left;'>{row[2][0]}</td>"  # ‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥
            html += f"</tr>"
        html += "</tbody></table></div>"
        return style + html

    left_spacer, col1, col2, right_spacer = st.columns([1, 3, 3, 1])

    with col1:
        st.markdown(render_lab_section("‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à CBC", "Complete Blood Count", ["‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à", "‡∏ú‡∏•", "‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥"], cbc_rows), unsafe_allow_html=True)
    
    with col2:
        st.markdown(render_lab_section("‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡πÄ‡∏Ñ‡∏°‡∏µ‡πÄ‡∏•‡∏∑‡∏≠‡∏î", "Blood Chemistry", ["‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à", "‡∏ú‡∏•", "‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥"], blood_rows), unsafe_allow_html=True)

    # ==================== ‡∏£‡∏ß‡∏°‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥ ====================
    gfr_raw = person.get("GFR", "")
    fbs_raw = person.get("FBS", "")
    alp_raw = person.get("ALP", "")
    sgot_raw = person.get("SGOT", "")
    sgpt_raw = person.get("SGPT", "")
    uric_raw = person.get("Uric Acid", "")
    chol_raw = person.get("CHOL", "")
    tgl_raw = person.get("TGL", "")
    ldl_raw = person.get("LDL", "")

    advice_list = []
    kidney_summary = kidney_summary_gfr_only(gfr_raw)
    advice_list.append(kidney_advice_from_summary(kidney_summary))
    advice_list.append(fbs_advice(fbs_raw))
    advice_list.append(liver_advice(summarize_liver(alp_raw, sgot_raw, sgpt_raw)))
    advice_list.append(uric_acid_advice(uric_raw))
    advice_list.append(lipids_advice(summarize_lipids(chol_raw, tgl_raw, ldl_raw)))
    advice_list.append(cbc_advice(
        person.get("Hb(%)", ""),  
        person.get("HCT", ""),  
        person.get("WBC (cumm)", ""),  
        person.get("Plt (/mm)", ""),
        sex=sex
    ))

    def merge_final_advice_grouped(messages):
        groups = {
            "FBS": [], "‡πÑ‡∏ï": [], "‡∏ï‡∏±‡∏ö": [], "‡∏¢‡∏π‡∏£‡∏¥‡∏Ñ": [], "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô": [], "‡∏≠‡∏∑‡πà‡∏ô‡πÜ": []
        }

        for msg in messages:
            if not msg or msg.strip() in ["-", ""]:
                continue
            if "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•" in msg:
                groups["FBS"].append(msg)
            elif "‡πÑ‡∏ï" in msg:
                groups["‡πÑ‡∏ï"].append(msg)
            elif "‡∏ï‡∏±‡∏ö" in msg:
                groups["‡∏ï‡∏±‡∏ö"].append(msg)
            elif "‡∏û‡∏¥‡∏ß‡∏£‡∏µ‡∏ô" in msg or "‡∏¢‡∏π‡∏£‡∏¥‡∏Ñ" in msg:
                groups["‡∏¢‡∏π‡∏£‡∏¥‡∏Ñ"].append(msg)
            elif "‡πÑ‡∏Ç‡∏°‡∏±‡∏ô" in msg:
                groups["‡πÑ‡∏Ç‡∏°‡∏±‡∏ô"].append(msg)
            else:
                groups["‡∏≠‡∏∑‡πà‡∏ô‡πÜ"].append(msg)
        output = []
        for title, msgs in groups.items():
            if msgs:
                unique_msgs = list(OrderedDict.fromkeys(msgs))
                output.append(f"<b>{title}:</b> {' '.join(unique_msgs)}")
        if not output:
            return "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à"

        return "<div style='margin-bottom: 0.75rem;'>" + "</div><div style='margin-bottom: 0.75rem;'>".join(output) + "</div>"

    spacer_l, main_col, spacer_r = st.columns([1, 6, 1])

    with main_col:
        final_advice_html = merge_final_advice_grouped(advice_list)
        has_advice = "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°" not in final_advice_html
        background_color = (
            "rgba(255, 215, 0, 0.15)" if has_advice else "rgba(200, 255, 200, 0.15)"
        )
        text_color = "var(--text-color)"
        
        st.markdown(f"""
        <div style="
            background-color: {background_color};
            padding: 1rem 2.5rem;
            border-radius: 10px;
            font-size: 16px;
            line-height: 1.5;
            color: var(--text-color);
        ">
            <div style="font-size: 18px; font-weight: bold; margin-bottom: 0.5rem;">
                üìã ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û
            </div>
            {final_advice_html}
        </div>
        """, unsafe_allow_html=True)

    # ==================== Urinalysis Section ====================
    # This render_section_header is a duplicate, but kept for context as it was in the original snippet
    def render_section_header(title, subtitle=None):
        if subtitle:
            full_title = f"{title} <span style='font-weight: normal;'>({subtitle})</span>"
        else:
            full_title = title
        
        return f"""
        <div style='
            background-color: #1b5e20;
            color: white;
            text-align: center;
            padding: 1rem 0.5rem;
            font-size: 20px;
            font-weight: bold;
            font-family: "Segoe UI", sans-serif;
            border-radius: 8px;
            margin-top: 2rem;
            margin-bottom: 1rem;
        '>
            {full_title}
        </div>
        """
        
    def safe_value(val):
        val = str(val or "").strip()
        if val.lower() in ["", "nan", "none", "-"]:
            return "-"
        return val
        
    with st.container():
        left_spacer_ua, col_ua_left, col_ua_right, right_spacer_ua = st.columns([1, 3, 3, 1])
        
    if "person_row" in st.session_state:
        person = st.session_state["person_row"]
        sex = person.get("‡πÄ‡∏û‡∏®", "-").strip()
        year_selected = person.get("Year", "-")
        
        alb_raw = person.get("Alb", "-")
        sugar_raw = person.get("sugar", "-")
        rbc_raw = person.get("RBC1", "-")
        wbc_raw = person.get("WBC1", "-")
        
        def interpret_alb(value):
            val = str(value).strip().lower()
            if val == "negative":
                return "‡πÑ‡∏°‡πà‡∏û‡∏ö"
            elif val in ["trace", "1+", "2+"]:
                return "‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
            elif val in ["3+", "4+"]:
                return "‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞"
            return "-"
        
        def interpret_sugar(value):
            val = str(value).strip().lower()
            if val == "negative":
                return "‡πÑ‡∏°‡πà‡∏û‡∏ö"
            elif val == "trace":
                return "‡∏û‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
            elif val in ["1+", "2+", "3+", "4+", "5+", "6+"]:
                return "‡∏û‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞"
            return "-"
        
        def parse_range_or_number(val):
            val = val.replace("cell/hpf", "").replace("cells/hpf", "").replace("cell", "").strip().lower()
            try:
                if "-" in val:
                    low, high = map(float, val.split("-"))
                    return low, high
                else:
                    num = float(val)
                    return num, num
            except:
                return None, None
        
        def interpret_rbc(value):
            val = str(value or "").strip().lower()
            if val in ["-", "", "none", "nan"]:
                return "-"
            low, high = parse_range_or_number(val)
            if high is None:
                return value
            if high <= 2:
                return "‡∏õ‡∏Å‡∏ï‡∏¥"
            elif high <= 5:
                return "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÅ‡∏î‡∏á‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
            else:
                return "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÅ‡∏î‡∏á‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞"
        
        def interpret_wbc(value):
            val = str(value or "").strip().lower()
            if val in ["-", "", "none", "nan"]:
                return "-"
            low, high = parse_range_or_number(val)
            if high is None:
                return value
            if high <= 5:
                return "‡∏õ‡∏Å‡∏ï‡∏¥"
            elif high <= 10:
                return "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"
            else:
                return "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞"
        
        def advice_urine(sex, alb, sugar, rbc, wbc):
            alb_t = interpret_alb(alb)
            sugar_t = interpret_sugar(sugar)
            rbc_t = interpret_rbc(rbc)
            wbc_t = interpret_wbc(wbc)
        
            if all(x in ["-", "‡∏õ‡∏Å‡∏ï‡∏¥", "‡πÑ‡∏°‡πà‡∏û‡∏ö", "‡∏û‡∏ö‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢", "‡∏û‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢"]
                    for x in [alb_t, sugar_t, rbc_t, wbc_t]):
                return ""
        
            if "‡∏û‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞" in sugar_t and "‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢" not in sugar_t:
                return "‡∏Ñ‡∏ß‡∏£‡∏•‡∏î‡∏Å‡∏≤‡∏£‡∏ö‡∏£‡∏¥‡πÇ‡∏†‡∏Ñ‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• ‡πÅ‡∏•‡∏∞‡∏ï‡∏£‡∏ß‡∏à‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏•‡πÉ‡∏ô‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
        
            if sex == "‡∏´‡∏ç‡∏¥‡∏á" and "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÅ‡∏î‡∏á" in rbc_t and "‡∏õ‡∏Å‡∏ï‡∏¥" in wbc_t:
                return "‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏õ‡∏ô‡πÄ‡∏õ‡∏∑‡πâ‡∏≠‡∏ô‡∏à‡∏≤‡∏Å‡∏õ‡∏£‡∏∞‡∏à‡∏≥‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥"
        
            if sex == "‡∏ä‡∏≤‡∏¢" and "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÅ‡∏î‡∏á" in rbc_t and "‡∏õ‡∏Å‡∏ï‡∏¥" in wbc_t:
                return "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÅ‡∏î‡∏á‡πÉ‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞ ‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°"
        
            if "‡∏û‡∏ö‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß" in wbc_t and "‡πÄ‡∏•‡πá‡∏Å‡∏ô‡πâ‡∏≠‡∏¢" not in wbc_t:
                return "‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏≠‡∏±‡∏Å‡πÄ‡∏™‡∏ö‡∏Ç‡∏≠‡∏á‡∏£‡∏∞‡∏ö‡∏ö‡∏ó‡∏≤‡∏á‡πÄ‡∏î‡∏¥‡∏ô‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞ ‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏ß‡∏à‡∏ã‡πâ‡∏≥"
        
            return "‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡∏ã‡πâ‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•"
        
        urine_data = [
            ("‡∏™‡∏µ (Colour)", safe_value(person.get("Color", "-")), "Yellow, Pale Yellow"),
            ("‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• (Sugar)", safe_value(sugar_raw), "Negative"),
            ("‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô (Albumin)", safe_value(alb_raw), "Negative, trace"),
            ("‡∏Å‡∏£‡∏î-‡∏î‡πà‡∏≤‡∏á (pH)", safe_value(person.get("pH", "-")), "5.0 - 8.0"),
            ("‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡πà‡∏ß‡∏á‡∏à‡∏≥‡πÄ‡∏û‡∏≤‡∏∞ (Sp.gr)", safe_value(person.get("Spgr", "-")), "1.003 - 1.030"),
            ("‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÅ‡∏î‡∏á (RBC)", safe_value(rbc_raw), "0 - 2 cell/HPF"),
            ("‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß (WBC)", safe_value(wbc_raw), "0 - 5 cell/HPF"),
            ("‡πÄ‡∏ã‡∏•‡∏•‡πå‡πÄ‡∏¢‡∏∑‡πà‡∏≠‡∏ö‡∏∏‡∏ú‡∏¥‡∏ß (Squam.epit.)", safe_value(person.get("SQ-epi", "-")), "0 - 10 cell/HPF"),
            ("‡∏≠‡∏∑‡πà‡∏ô‡πÜ", safe_value(person.get("ORTER", "-")), "-"),
        ]
        
        st.markdown("""
        <style>
            .urine-table, .lab-table {
                width: 100%;
                table-layout: fixed;
            }
            .urine-table td, .lab-table td {
                overflow-wrap: break-word;
            }
            .stMarkdown {
                overflow-x: auto;
            }
        </style>
        """, unsafe_allow_html=True)
        
        with col_ua_left:
            st.markdown(render_section_header("‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞", "Urinalysis"), unsafe_allow_html=True)
            df_urine = pd.DataFrame(urine_data, columns=["‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à", "‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à", "‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥"])
        
            def is_urine_abnormal(test_name, value, normal_range):
                val = str(value or "").strip().lower()
                if val in ["", "-", "none", "nan", "null"]:
                    return False
        
                if test_name == "‡∏Å‡∏£‡∏î-‡∏î‡πà‡∏≤‡∏á (pH)":
                    try:
                        return not (5.0 <= float(val) <= 8.0)
                    except:
                        return True
        
                if test_name == "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡πà‡∏ß‡∏á‡∏à‡∏≥‡πÄ‡∏û‡∏≤‡∏∞ (Sp.gr)":
                    try:
                        return not (1.003 <= float(val) <= 1.030)
                    except:
                        return True
        
                if test_name == "‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡πÅ‡∏î‡∏á (RBC)":
                    return "‡∏û‡∏ö" in interpret_rbc(val).lower() and "‡∏õ‡∏Å‡∏ï‡∏¥" not in interpret_rbc(val).lower()
        
                if test_name == "‡πÄ‡∏°‡πá‡∏î‡πÄ‡∏•‡∏∑‡∏≠‡∏î‡∏Ç‡∏≤‡∏ß (WBC)":
                    return "‡∏û‡∏ö" in interpret_wbc(val).lower() and "‡∏õ‡∏Å‡∏ï‡∏¥" not in interpret_wbc(val).lower()
        
                if test_name == "‡∏ô‡πâ‡∏≥‡∏ï‡∏≤‡∏• (Sugar)":
                    return interpret_sugar(val).lower() != "‡πÑ‡∏°‡πà‡∏û‡∏ö"
        
                if test_name == "‡πÇ‡∏õ‡∏£‡∏ï‡∏µ‡∏ô (Albumin)":
                    return interpret_alb(val).lower() != "‡πÑ‡∏°‡πà‡∏û‡∏ö"
        
                if test_name == "‡∏™‡∏µ (Colour)":
                    # For color, we might want to be less strict or list specific "normal" colors
                    # For now, if it's not a common normal color, flag it
                    normal_colors = ["yellow", "pale yellow", "colorless", "paleyellow", "light yellow"]
                    return val not in normal_colors
        
                return False
        
            def render_urine_html_table(df):
                html_table = """
                <style>
                    .urine-table {
                        width: 100%;
                        border-collapse: collapse;
                        font-size: 16px;
                        font-family: "Segoe UI", sans-serif;
                        color: var(--text-color);
                        margin-top: 1rem;
                    }
                    .urine-table th {
                        background-color: var(--secondary-background-color);
                        color: var(--text-color);
                        padding: 8px 4px;
                        text-align: center;
                        font-weight: bold;
                        border: 1px solid transparent;
                    }
                    .urine-table td {
                        padding: 8px 4px;
                        border: 1px solid transparent;
                        text-align: center;
                        vertical-align: top;
                    }
                    .urine-abn {
                        background-color: rgba(255, 64, 64, 0.25); /* ‡∏™‡∏µ‡πÅ‡∏î‡∏á‡πÇ‡∏õ‡∏£‡πà‡∏á‡πÅ‡∏™‡∏á */
                    }
                    .urine-row {
                        background-color: rgba(255,255,255,0.02);
                    }
                </style>
                <div class='urine-container'>
                <table class='urine-table'>
                    <thead>
                        <tr>
                            <th style='width: 35%; text-align: left;'>‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à</th>
                            <th style='width: 30%;'>‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à</th>
                            <th style='width: 35%; text-align: left;'>‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥</th>
                        </tr>
                    </thead>
                    <tbody>
                """
                for index, row in df.iterrows():
                    test_name = row["‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à"]
                    value = row["‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à"]
                    normal_range = row["‡∏Ñ‡πà‡∏≤‡∏õ‡∏Å‡∏ï‡∏¥"]
                    is_abnormal = is_urine_abnormal(test_name, value, normal_range)
                    row_class = "urine-abn" if is_abnormal else "urine-row"
                    
                    html_table += f"""
                    <tr>
                        <td class='{row_class}' style='text-align: left;'>{html.escape(str(test_name))}</td>
                        <td class='{row_class}'>{html.escape(str(value))}</td>
                        <td class='{row_class}' style='text-align: left;'>{html.escape(str(normal_range))}</td>
                    </tr>
                    """
                html_table += """
                    </tbody>
                </table>
                </div>
                """
                return html_table
            
            st.markdown(render_urine_html_table(df_urine), unsafe_allow_html=True)
            
        with col_ua_right:
            st.markdown(render_section_header("‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞", "Urinalysis Advice"), unsafe_allow_html=True)
            urine_advice_text = advice_urine(
                sex,
                safe_value(person.get("Alb", "-")),
                safe_value(person.get("sugar", "-")),
                safe_value(person.get("RBC1", "-")),
                safe_value(person.get("WBC1", "-"))
            )
            
            if not urine_advice_text or urine_advice_text == "‡∏Ñ‡∏ß‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡∏ã‡πâ‡∏≥‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏ï‡∏¥‡∏î‡∏ï‡∏≤‡∏°‡∏ú‡∏•":
                advice_bg_color = "rgba(200, 255, 200, 0.15)" # Greenish for normal/no specific advice
                display_advice = urine_advice_text if urine_advice_text else "‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ú‡∏•‡∏ï‡∏£‡∏ß‡∏à‡∏õ‡∏±‡∏™‡∏™‡∏≤‡∏ß‡∏∞‡∏ô‡∏µ‡πâ"
            else:
                advice_bg_color = "rgba(255, 215, 0, 0.15)" # Yellowish for advice needed
                display_advice = urine_advice_text
            
            st.markdown(f"""
            <div style="
                background-color: {advice_bg_color};
                padding: 1rem 1.5rem;
                border-radius: 10px;
                font-size: 16px;
                line-height: 1.5;
                color: var(--text-color);
                height: 100%; /* Ensure it fills the column height */
                display: flex;
                align-items: center;
                justify-content: center;
                text-align: center;
            ">
                {html.escape(display_advice)}
            </div>
            """, unsafe_allow_html=True)
